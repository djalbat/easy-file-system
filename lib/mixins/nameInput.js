"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _eventTypes = require("../eventTypes");
function onChange(changeHandler, element) {
    var eventType = _eventTypes.CHANGE_EVENT_TYPE, handler = changeHandler; ///
    this.addEventListener(eventType, handler, element);
}
function offChange(changeHandler, element) {
    var eventType = _eventTypes.CHANGE_EVENT_TYPE, handler = changeHandler; ///
    this.removeEventListener(eventType, handler, element);
}
function onCancel(cancelHandler, element) {
    var eventType = _eventTypes.CANCEL_EVENT_TYPE, handler = cancelHandler; ///
    this.addEventListener(eventType, handler, element);
}
function offCancel(cancelHandler, element) {
    var eventType = _eventTypes.CANCEL_EVENT_TYPE, handler = cancelHandler; ///
    this.removeEventListener(eventType, handler, element);
}
function callChangeHandlers() {
    var eventType = _eventTypes.CHANGE_EVENT_TYPE, eventListeners = this.findEventListeners(eventType);
    eventListeners.forEach(function(eventListener) {
        var handler = eventListener.handler, element = eventListener.element, changeHandler = handler; ///
        changeHandler.call(element);
    });
}
function callCancelHandlers() {
    var eventType = _eventTypes.CANCEL_EVENT_TYPE, eventListeners = this.findEventListeners(eventType);
    eventListeners.forEach(function(eventListener) {
        var handler = eventListener.handler, element = eventListener.element, cancelHandler = handler; ///
        cancelHandler.call(element);
    });
}
var nameInputMixins = {
    onChange: onChange,
    offChange: offChange,
    onCancel: onCancel,
    offCancel: offCancel,
    callChangeHandlers: callChangeHandlers,
    callCancelHandlers: callCancelHandlers
};
var _default = nameInputMixins;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taXhpbnMvbmFtZUlucHV0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBDSEFOR0VfRVZFTlRfVFlQRSwgQ0FOQ0VMX0VWRU5UX1RZUEUgfSBmcm9tIFwiLi4vZXZlbnRUeXBlc1wiO1xuXG5mdW5jdGlvbiBvbkNoYW5nZShjaGFuZ2VIYW5kbGVyLCBlbGVtZW50KSB7XG4gIGNvbnN0IGV2ZW50VHlwZSA9IENIQU5HRV9FVkVOVF9UWVBFLFxuICAgICAgICBoYW5kbGVyID0gY2hhbmdlSGFuZGxlcjsgIC8vL1xuXG4gIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGhhbmRsZXIsIGVsZW1lbnQpO1xufVxuXG5mdW5jdGlvbiBvZmZDaGFuZ2UoY2hhbmdlSGFuZGxlciwgZWxlbWVudCkge1xuICBjb25zdCBldmVudFR5cGUgPSBDSEFOR0VfRVZFTlRfVFlQRSxcbiAgICAgICAgaGFuZGxlciA9IGNoYW5nZUhhbmRsZXI7ICAvLy9cblxuICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBoYW5kbGVyLCBlbGVtZW50KTtcbn1cblxuZnVuY3Rpb24gb25DYW5jZWwoY2FuY2VsSGFuZGxlciwgZWxlbWVudCkge1xuICAgIGNvbnN0IGV2ZW50VHlwZSA9IENBTkNFTF9FVkVOVF9UWVBFLFxuICAgICAgICAgIGhhbmRsZXIgPSBjYW5jZWxIYW5kbGVyOyAgLy8vXG5cbiAgdGhpcy5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgaGFuZGxlciwgZWxlbWVudCk7XG59XG5cbmZ1bmN0aW9uIG9mZkNhbmNlbChjYW5jZWxIYW5kbGVyLCBlbGVtZW50KSB7XG4gICAgY29uc3QgZXZlbnRUeXBlID0gQ0FOQ0VMX0VWRU5UX1RZUEUsXG4gICAgICAgICAgaGFuZGxlciA9IGNhbmNlbEhhbmRsZXI7ICAvLy9cblxuICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBoYW5kbGVyLCBlbGVtZW50KTtcbn1cblxuZnVuY3Rpb24gY2FsbENoYW5nZUhhbmRsZXJzKCkge1xuICBjb25zdCBldmVudFR5cGUgPSBDSEFOR0VfRVZFTlRfVFlQRSxcbiAgICAgICAgZXZlbnRMaXN0ZW5lcnMgPSB0aGlzLmZpbmRFdmVudExpc3RlbmVycyhldmVudFR5cGUpO1xuXG4gIGV2ZW50TGlzdGVuZXJzLmZvckVhY2goKGV2ZW50TGlzdGVuZXIpID0+IHtcbiAgICBjb25zdCB7IGhhbmRsZXIsIGVsZW1lbnQgfSA9IGV2ZW50TGlzdGVuZXIsXG4gICAgICAgICAgY2hhbmdlSGFuZGxlciA9IGhhbmRsZXI7ICAvLy9cblxuICAgIGNoYW5nZUhhbmRsZXIuY2FsbChlbGVtZW50KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNhbGxDYW5jZWxIYW5kbGVycygpIHtcbiAgICBjb25zdCBldmVudFR5cGUgPSBDQU5DRUxfRVZFTlRfVFlQRSxcbiAgICAgICAgICBldmVudExpc3RlbmVycyA9IHRoaXMuZmluZEV2ZW50TGlzdGVuZXJzKGV2ZW50VHlwZSk7XG5cbiAgZXZlbnRMaXN0ZW5lcnMuZm9yRWFjaCgoZXZlbnRMaXN0ZW5lcikgPT4ge1xuICAgIGNvbnN0IHsgaGFuZGxlciwgZWxlbWVudCB9ID0gZXZlbnRMaXN0ZW5lcixcbiAgICAgICAgICBjYW5jZWxIYW5kbGVyID0gaGFuZGxlcjsgIC8vL1xuXG4gICAgY2FuY2VsSGFuZGxlci5jYWxsKGVsZW1lbnQpO1xuICB9KTtcbn1cblxuY29uc3QgbmFtZUlucHV0TWl4aW5zID0ge1xuICBvbkNoYW5nZSxcbiAgb2ZmQ2hhbmdlLFxuICBvbkNhbmNlbCxcbiAgb2ZmQ2FuY2VsLFxuICBjYWxsQ2hhbmdlSGFuZGxlcnMsXG4gIGNhbGxDYW5jZWxIYW5kbGVyc1xufTtcblxuZXhwb3J0IGRlZmF1bHQgbmFtZUlucHV0TWl4aW5zO1xuIl0sIm5hbWVzIjpbIm9uQ2hhbmdlIiwiY2hhbmdlSGFuZGxlciIsImVsZW1lbnQiLCJldmVudFR5cGUiLCJDSEFOR0VfRVZFTlRfVFlQRSIsImhhbmRsZXIiLCJhZGRFdmVudExpc3RlbmVyIiwib2ZmQ2hhbmdlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIm9uQ2FuY2VsIiwiY2FuY2VsSGFuZGxlciIsIkNBTkNFTF9FVkVOVF9UWVBFIiwib2ZmQ2FuY2VsIiwiY2FsbENoYW5nZUhhbmRsZXJzIiwiZXZlbnRMaXN0ZW5lcnMiLCJmaW5kRXZlbnRMaXN0ZW5lcnMiLCJmb3JFYWNoIiwiZXZlbnRMaXN0ZW5lciIsImNhbGwiLCJjYWxsQ2FuY2VsSGFuZGxlcnMiLCJuYW1lSW5wdXRNaXhpbnMiXSwibWFwcGluZ3MiOiJBQUFBOzs7OytCQWlFQTs7O2VBQUE7OzswQkEvRHFEO0FBRXJELFNBQVNBLFNBQVNDLGFBQWEsRUFBRUMsT0FBTyxFQUFFO0lBQ3hDLElBQU1DLFlBQVlDLDZCQUFpQixFQUM3QkMsVUFBVUosZUFBZ0IsR0FBRztJQUVuQyxJQUFJLENBQUNLLGdCQUFnQixDQUFDSCxXQUFXRSxTQUFTSDtBQUM1QztBQUVBLFNBQVNLLFVBQVVOLGFBQWEsRUFBRUMsT0FBTyxFQUFFO0lBQ3pDLElBQU1DLFlBQVlDLDZCQUFpQixFQUM3QkMsVUFBVUosZUFBZ0IsR0FBRztJQUVuQyxJQUFJLENBQUNPLG1CQUFtQixDQUFDTCxXQUFXRSxTQUFTSDtBQUMvQztBQUVBLFNBQVNPLFNBQVNDLGFBQWEsRUFBRVIsT0FBTyxFQUFFO0lBQ3RDLElBQU1DLFlBQVlRLDZCQUFpQixFQUM3Qk4sVUFBVUssZUFBZ0IsR0FBRztJQUVyQyxJQUFJLENBQUNKLGdCQUFnQixDQUFDSCxXQUFXRSxTQUFTSDtBQUM1QztBQUVBLFNBQVNVLFVBQVVGLGFBQWEsRUFBRVIsT0FBTyxFQUFFO0lBQ3ZDLElBQU1DLFlBQVlRLDZCQUFpQixFQUM3Qk4sVUFBVUssZUFBZ0IsR0FBRztJQUVyQyxJQUFJLENBQUNGLG1CQUFtQixDQUFDTCxXQUFXRSxTQUFTSDtBQUMvQztBQUVBLFNBQVNXLHFCQUFxQjtJQUM1QixJQUFNVixZQUFZQyw2QkFBaUIsRUFDN0JVLGlCQUFpQixJQUFJLENBQUNDLGtCQUFrQixDQUFDWjtJQUUvQ1csZUFBZUUsT0FBTyxDQUFDLFNBQUNDLGVBQWtCO1FBQ3hDLElBQVFaLFVBQXFCWSxjQUFyQlosU0FBU0gsVUFBWWUsY0FBWmYsU0FDWEQsZ0JBQWdCSSxTQUFVLEdBQUc7UUFFbkNKLGNBQWNpQixJQUFJLENBQUNoQjtJQUNyQjtBQUNGO0FBRUEsU0FBU2lCLHFCQUFxQjtJQUMxQixJQUFNaEIsWUFBWVEsNkJBQWlCLEVBQzdCRyxpQkFBaUIsSUFBSSxDQUFDQyxrQkFBa0IsQ0FBQ1o7SUFFakRXLGVBQWVFLE9BQU8sQ0FBQyxTQUFDQyxlQUFrQjtRQUN4QyxJQUFRWixVQUFxQlksY0FBckJaLFNBQVNILFVBQVllLGNBQVpmLFNBQ1hRLGdCQUFnQkwsU0FBVSxHQUFHO1FBRW5DSyxjQUFjUSxJQUFJLENBQUNoQjtJQUNyQjtBQUNGO0FBRUEsSUFBTWtCLGtCQUFrQjtJQUN0QnBCLFVBQUFBO0lBQ0FPLFdBQUFBO0lBQ0FFLFVBQUFBO0lBQ0FHLFdBQUFBO0lBQ0FDLG9CQUFBQTtJQUNBTSxvQkFBQUE7QUFDRjtJQUVBLFdBQWVDIn0=