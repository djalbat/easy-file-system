"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _eventTypes = require("../eventTypes");
function onChange(changeHandler, element) {
    var eventType = _eventTypes.CHANGE_EVENT_TYPE, handler = changeHandler; ///
    this.addEventListener(eventType, handler, element);
}
function offChange(changeHandler, element) {
    var eventType = _eventTypes.CHANGE_EVENT_TYPE, handler = changeHandler; ///
    this.removeEventListener(eventType, handler, element);
}
function onCancel(cancelHandler, element) {
    var eventType = _eventTypes.CANCEL_EVENT_TYPE, handler = cancelHandler; ///
    this.addEventListener(eventType, handler, element);
}
function offCancel(cancelHandler, element) {
    var eventType = _eventTypes.CANCEL_EVENT_TYPE, handler = cancelHandler; ///
    this.removeEventListener(eventType, handler, element);
}
function callChangeHandlers() {
    var eventType = _eventTypes.CHANGE_EVENT_TYPE, eventListeners = this.findEventListeners(eventType);
    eventListeners.forEach(function(eventListener) {
        var handler = eventListener.handler, element = eventListener.element, changeHandler = handler; ///
        changeHandler.call(element);
    });
}
function callCancelHandlers() {
    var eventType = _eventTypes.CANCEL_EVENT_TYPE, eventListeners = this.findEventListeners(eventType);
    eventListeners.forEach(function(eventListener) {
        var handler = eventListener.handler, element = eventListener.element, cancelHandler = handler; ///
        cancelHandler.call(element);
    });
}
var nameSpanMixins = {
    onChange: onChange,
    offChange: offChange,
    onCancel: onCancel,
    offCancel: offCancel,
    callChangeHandlers: callChangeHandlers,
    callCancelHandlers: callCancelHandlers
};
var _default = nameSpanMixins;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taXhpbnMvbmFtZVNwYW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IENIQU5HRV9FVkVOVF9UWVBFLCBDQU5DRUxfRVZFTlRfVFlQRSB9IGZyb20gXCIuLi9ldmVudFR5cGVzXCI7XG5cbmZ1bmN0aW9uIG9uQ2hhbmdlKGNoYW5nZUhhbmRsZXIsIGVsZW1lbnQpIHtcbiAgY29uc3QgZXZlbnRUeXBlID0gQ0hBTkdFX0VWRU5UX1RZUEUsXG4gICAgICAgIGhhbmRsZXIgPSBjaGFuZ2VIYW5kbGVyOyAgLy8vXG5cbiAgdGhpcy5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgaGFuZGxlciwgZWxlbWVudCk7XG59XG5cbmZ1bmN0aW9uIG9mZkNoYW5nZShjaGFuZ2VIYW5kbGVyLCBlbGVtZW50KSB7XG4gIGNvbnN0IGV2ZW50VHlwZSA9IENIQU5HRV9FVkVOVF9UWVBFLFxuICAgICAgICBoYW5kbGVyID0gY2hhbmdlSGFuZGxlcjsgIC8vL1xuXG4gIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGhhbmRsZXIsIGVsZW1lbnQpO1xufVxuXG5mdW5jdGlvbiBvbkNhbmNlbChjYW5jZWxIYW5kbGVyLCBlbGVtZW50KSB7XG4gICAgY29uc3QgZXZlbnRUeXBlID0gQ0FOQ0VMX0VWRU5UX1RZUEUsXG4gICAgICAgICAgaGFuZGxlciA9IGNhbmNlbEhhbmRsZXI7ICAvLy9cblxuICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBoYW5kbGVyLCBlbGVtZW50KTtcbn1cblxuZnVuY3Rpb24gb2ZmQ2FuY2VsKGNhbmNlbEhhbmRsZXIsIGVsZW1lbnQpIHtcbiAgICBjb25zdCBldmVudFR5cGUgPSBDQU5DRUxfRVZFTlRfVFlQRSxcbiAgICAgICAgICBoYW5kbGVyID0gY2FuY2VsSGFuZGxlcjsgIC8vL1xuXG4gIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGhhbmRsZXIsIGVsZW1lbnQpO1xufVxuXG5mdW5jdGlvbiBjYWxsQ2hhbmdlSGFuZGxlcnMoKSB7XG4gIGNvbnN0IGV2ZW50VHlwZSA9IENIQU5HRV9FVkVOVF9UWVBFLFxuICAgICAgICBldmVudExpc3RlbmVycyA9IHRoaXMuZmluZEV2ZW50TGlzdGVuZXJzKGV2ZW50VHlwZSk7XG5cbiAgZXZlbnRMaXN0ZW5lcnMuZm9yRWFjaCgoZXZlbnRMaXN0ZW5lcikgPT4ge1xuICAgIGNvbnN0IHsgaGFuZGxlciwgZWxlbWVudCB9ID0gZXZlbnRMaXN0ZW5lcixcbiAgICAgICAgICBjaGFuZ2VIYW5kbGVyID0gaGFuZGxlcjsgIC8vL1xuXG4gICAgY2hhbmdlSGFuZGxlci5jYWxsKGVsZW1lbnQpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gY2FsbENhbmNlbEhhbmRsZXJzKCkge1xuICBjb25zdCBldmVudFR5cGUgPSBDQU5DRUxfRVZFTlRfVFlQRSxcbiAgICAgICAgZXZlbnRMaXN0ZW5lcnMgPSB0aGlzLmZpbmRFdmVudExpc3RlbmVycyhldmVudFR5cGUpO1xuXG4gIGV2ZW50TGlzdGVuZXJzLmZvckVhY2goKGV2ZW50TGlzdGVuZXIpID0+IHtcbiAgICBjb25zdCB7IGhhbmRsZXIsIGVsZW1lbnQgfSA9IGV2ZW50TGlzdGVuZXIsXG4gICAgICAgICAgY2FuY2VsSGFuZGxlciA9IGhhbmRsZXI7ICAvLy9cblxuICAgIGNhbmNlbEhhbmRsZXIuY2FsbChlbGVtZW50KTtcbiAgfSk7XG59XG5cbmNvbnN0IG5hbWVTcGFuTWl4aW5zID0ge1xuICBvbkNoYW5nZSxcbiAgb2ZmQ2hhbmdlLFxuICBvbkNhbmNlbCxcbiAgb2ZmQ2FuY2VsLFxuICBjYWxsQ2hhbmdlSGFuZGxlcnMsXG4gIGNhbGxDYW5jZWxIYW5kbGVyc1xufTtcblxuZXhwb3J0IGRlZmF1bHQgbmFtZVNwYW5NaXhpbnM7XG4iXSwibmFtZXMiOlsib25DaGFuZ2UiLCJjaGFuZ2VIYW5kbGVyIiwiZWxlbWVudCIsImV2ZW50VHlwZSIsIkNIQU5HRV9FVkVOVF9UWVBFIiwiaGFuZGxlciIsImFkZEV2ZW50TGlzdGVuZXIiLCJvZmZDaGFuZ2UiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwib25DYW5jZWwiLCJjYW5jZWxIYW5kbGVyIiwiQ0FOQ0VMX0VWRU5UX1RZUEUiLCJvZmZDYW5jZWwiLCJjYWxsQ2hhbmdlSGFuZGxlcnMiLCJldmVudExpc3RlbmVycyIsImZpbmRFdmVudExpc3RlbmVycyIsImZvckVhY2giLCJldmVudExpc3RlbmVyIiwiY2FsbCIsImNhbGxDYW5jZWxIYW5kbGVycyIsIm5hbWVTcGFuTWl4aW5zIl0sIm1hcHBpbmdzIjoiQUFBQTs7OzsrQkFpRUE7OztlQUFBOzs7MEJBL0RxRDtBQUVyRCxTQUFTQSxTQUFTQyxhQUFhLEVBQUVDLE9BQU87SUFDdEMsSUFBTUMsWUFBWUMsK0JBQ1pDLFVBQVVKLGVBQWdCLEdBQUc7SUFFbkMsSUFBSSxDQUFDSyxpQkFBaUJILFdBQVdFLFNBQVNIO0FBQzVDO0FBRUEsU0FBU0ssVUFBVU4sYUFBYSxFQUFFQyxPQUFPO0lBQ3ZDLElBQU1DLFlBQVlDLCtCQUNaQyxVQUFVSixlQUFnQixHQUFHO0lBRW5DLElBQUksQ0FBQ08sb0JBQW9CTCxXQUFXRSxTQUFTSDtBQUMvQztBQUVBLFNBQVNPLFNBQVNDLGFBQWEsRUFBRVIsT0FBTztJQUNwQyxJQUFNQyxZQUFZUSwrQkFDWk4sVUFBVUssZUFBZ0IsR0FBRztJQUVyQyxJQUFJLENBQUNKLGlCQUFpQkgsV0FBV0UsU0FBU0g7QUFDNUM7QUFFQSxTQUFTVSxVQUFVRixhQUFhLEVBQUVSLE9BQU87SUFDckMsSUFBTUMsWUFBWVEsK0JBQ1pOLFVBQVVLLGVBQWdCLEdBQUc7SUFFckMsSUFBSSxDQUFDRixvQkFBb0JMLFdBQVdFLFNBQVNIO0FBQy9DO0FBRUEsU0FBU1c7SUFDUCxJQUFNVixZQUFZQywrQkFDWlUsaUJBQWlCLElBQUksQ0FBQ0MsbUJBQW1CWjtJQUUvQ1csZUFBZUUsUUFBUSxTQUFDQztRQUN0QixJQUFRWixVQUFxQlksY0FBckJaLFNBQVNILFVBQVllLGNBQVpmLFNBQ1hELGdCQUFnQkksU0FBVSxHQUFHO1FBRW5DSixjQUFjaUIsS0FBS2hCO0lBQ3JCO0FBQ0Y7QUFFQSxTQUFTaUI7SUFDUCxJQUFNaEIsWUFBWVEsK0JBQ1pHLGlCQUFpQixJQUFJLENBQUNDLG1CQUFtQlo7SUFFL0NXLGVBQWVFLFFBQVEsU0FBQ0M7UUFDdEIsSUFBUVosVUFBcUJZLGNBQXJCWixTQUFTSCxVQUFZZSxjQUFaZixTQUNYUSxnQkFBZ0JMLFNBQVUsR0FBRztRQUVuQ0ssY0FBY1EsS0FBS2hCO0lBQ3JCO0FBQ0Y7QUFFQSxJQUFNa0IsaUJBQWlCO0lBQ3JCcEIsVUFBQUE7SUFDQU8sV0FBQUE7SUFDQUUsVUFBQUE7SUFDQUcsV0FBQUE7SUFDQUMsb0JBQUFBO0lBQ0FNLG9CQUFBQTtBQUNGO0lBRUEsV0FBZUMifQ==