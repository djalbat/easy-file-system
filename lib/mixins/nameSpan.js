"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _eventTypes = require("../eventTypes");
function onChange(changeHandler, element) {
    var eventType = _eventTypes.CHANGE_EVENT_TYPE, handler = changeHandler; ///
    this.addEventListener(eventType, handler, element);
}
function offChange(changeHandler, element) {
    var eventType = _eventTypes.CHANGE_EVENT_TYPE, handler = changeHandler; ///
    this.removeEventListener(eventType, handler, element);
}
function onCancel(cancelHandler, element) {
    var eventType = _eventTypes.CANCEL_EVENT_TYPE, handler = cancelHandler; ///
    this.addEventListener(eventType, handler, element);
}
function offCancel(cancelHandler, element) {
    var eventType = _eventTypes.CANCEL_EVENT_TYPE, handler = cancelHandler; ///
    this.removeEventListener(eventType, handler, element);
}
function callChangeHandlers() {
    var eventType = _eventTypes.CHANGE_EVENT_TYPE, eventListeners = this.findEventListeners(eventType);
    eventListeners.forEach(function(eventListener) {
        var handler = eventListener.handler, element = eventListener.element, changeHandler = handler; ///
        changeHandler.call(element);
    });
}
function callCancelHandlers() {
    var eventType = _eventTypes.CANCEL_EVENT_TYPE, eventListeners = this.findEventListeners(eventType);
    eventListeners.forEach(function(eventListener) {
        var handler = eventListener.handler, element = eventListener.element, cancelHandler = handler; ///
        cancelHandler.call(element);
    });
}
var nameSpanMixins = {
    onChange: onChange,
    offChange: offChange,
    onCancel: onCancel,
    offCancel: offCancel,
    callChangeHandlers: callChangeHandlers,
    callCancelHandlers: callCancelHandlers
};
var _default = nameSpanMixins;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taXhpbnMvbmFtZVNwYW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IENIQU5HRV9FVkVOVF9UWVBFLCBDQU5DRUxfRVZFTlRfVFlQRSB9IGZyb20gXCIuLi9ldmVudFR5cGVzXCI7XG5cbmZ1bmN0aW9uIG9uQ2hhbmdlKGNoYW5nZUhhbmRsZXIsIGVsZW1lbnQpIHtcbiAgY29uc3QgZXZlbnRUeXBlID0gQ0hBTkdFX0VWRU5UX1RZUEUsXG4gICAgICAgIGhhbmRsZXIgPSBjaGFuZ2VIYW5kbGVyOyAgLy8vXG5cbiAgdGhpcy5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgaGFuZGxlciwgZWxlbWVudCk7XG59XG5cbmZ1bmN0aW9uIG9mZkNoYW5nZShjaGFuZ2VIYW5kbGVyLCBlbGVtZW50KSB7XG4gIGNvbnN0IGV2ZW50VHlwZSA9IENIQU5HRV9FVkVOVF9UWVBFLFxuICAgICAgICBoYW5kbGVyID0gY2hhbmdlSGFuZGxlcjsgIC8vL1xuXG4gIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGhhbmRsZXIsIGVsZW1lbnQpO1xufVxuXG5mdW5jdGlvbiBvbkNhbmNlbChjYW5jZWxIYW5kbGVyLCBlbGVtZW50KSB7XG4gICAgY29uc3QgZXZlbnRUeXBlID0gQ0FOQ0VMX0VWRU5UX1RZUEUsXG4gICAgICAgICAgaGFuZGxlciA9IGNhbmNlbEhhbmRsZXI7ICAvLy9cblxuICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBoYW5kbGVyLCBlbGVtZW50KTtcbn1cblxuZnVuY3Rpb24gb2ZmQ2FuY2VsKGNhbmNlbEhhbmRsZXIsIGVsZW1lbnQpIHtcbiAgICBjb25zdCBldmVudFR5cGUgPSBDQU5DRUxfRVZFTlRfVFlQRSxcbiAgICAgICAgICBoYW5kbGVyID0gY2FuY2VsSGFuZGxlcjsgIC8vL1xuXG4gIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGhhbmRsZXIsIGVsZW1lbnQpO1xufVxuXG5mdW5jdGlvbiBjYWxsQ2hhbmdlSGFuZGxlcnMoKSB7XG4gIGNvbnN0IGV2ZW50VHlwZSA9IENIQU5HRV9FVkVOVF9UWVBFLFxuICAgICAgICBldmVudExpc3RlbmVycyA9IHRoaXMuZmluZEV2ZW50TGlzdGVuZXJzKGV2ZW50VHlwZSk7XG5cbiAgZXZlbnRMaXN0ZW5lcnMuZm9yRWFjaCgoZXZlbnRMaXN0ZW5lcikgPT4ge1xuICAgIGNvbnN0IHsgaGFuZGxlciwgZWxlbWVudCB9ID0gZXZlbnRMaXN0ZW5lcixcbiAgICAgICAgICBjaGFuZ2VIYW5kbGVyID0gaGFuZGxlcjsgIC8vL1xuXG4gICAgY2hhbmdlSGFuZGxlci5jYWxsKGVsZW1lbnQpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gY2FsbENhbmNlbEhhbmRsZXJzKCkge1xuICAgIGNvbnN0IGV2ZW50VHlwZSA9IENBTkNFTF9FVkVOVF9UWVBFLFxuICAgICAgICAgIGV2ZW50TGlzdGVuZXJzID0gdGhpcy5maW5kRXZlbnRMaXN0ZW5lcnMoZXZlbnRUeXBlKTtcblxuICBldmVudExpc3RlbmVycy5mb3JFYWNoKChldmVudExpc3RlbmVyKSA9PiB7XG4gICAgY29uc3QgeyBoYW5kbGVyLCBlbGVtZW50IH0gPSBldmVudExpc3RlbmVyLFxuICAgICAgICAgIGNhbmNlbEhhbmRsZXIgPSBoYW5kbGVyOyAgLy8vXG5cbiAgICBjYW5jZWxIYW5kbGVyLmNhbGwoZWxlbWVudCk7XG4gIH0pO1xufVxuXG5jb25zdCBuYW1lU3Bhbk1peGlucyA9IHtcbiAgb25DaGFuZ2UsXG4gIG9mZkNoYW5nZSxcbiAgb25DYW5jZWwsXG4gIG9mZkNhbmNlbCxcbiAgY2FsbENoYW5nZUhhbmRsZXJzLFxuICBjYWxsQ2FuY2VsSGFuZGxlcnNcbn07XG5cbmV4cG9ydCBkZWZhdWx0IG5hbWVTcGFuTWl4aW5zO1xuIl0sIm5hbWVzIjpbIm9uQ2hhbmdlIiwiY2hhbmdlSGFuZGxlciIsImVsZW1lbnQiLCJldmVudFR5cGUiLCJDSEFOR0VfRVZFTlRfVFlQRSIsImhhbmRsZXIiLCJhZGRFdmVudExpc3RlbmVyIiwib2ZmQ2hhbmdlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIm9uQ2FuY2VsIiwiY2FuY2VsSGFuZGxlciIsIkNBTkNFTF9FVkVOVF9UWVBFIiwib2ZmQ2FuY2VsIiwiY2FsbENoYW5nZUhhbmRsZXJzIiwiZXZlbnRMaXN0ZW5lcnMiLCJmaW5kRXZlbnRMaXN0ZW5lcnMiLCJmb3JFYWNoIiwiZXZlbnRMaXN0ZW5lciIsImNhbGwiLCJjYWxsQ2FuY2VsSGFuZGxlcnMiLCJuYW1lU3Bhbk1peGlucyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7K0JBaUVBOzs7ZUFBQTs7OzBCQS9EcUQ7QUFFckQsU0FBU0EsU0FBU0MsYUFBYSxFQUFFQyxPQUFPLEVBQUU7SUFDeEMsSUFBTUMsWUFBWUMsNkJBQWlCLEVBQzdCQyxVQUFVSixlQUFnQixHQUFHO0lBRW5DLElBQUksQ0FBQ0ssZ0JBQWdCLENBQUNILFdBQVdFLFNBQVNIO0FBQzVDO0FBRUEsU0FBU0ssVUFBVU4sYUFBYSxFQUFFQyxPQUFPLEVBQUU7SUFDekMsSUFBTUMsWUFBWUMsNkJBQWlCLEVBQzdCQyxVQUFVSixlQUFnQixHQUFHO0lBRW5DLElBQUksQ0FBQ08sbUJBQW1CLENBQUNMLFdBQVdFLFNBQVNIO0FBQy9DO0FBRUEsU0FBU08sU0FBU0MsYUFBYSxFQUFFUixPQUFPLEVBQUU7SUFDdEMsSUFBTUMsWUFBWVEsNkJBQWlCLEVBQzdCTixVQUFVSyxlQUFnQixHQUFHO0lBRXJDLElBQUksQ0FBQ0osZ0JBQWdCLENBQUNILFdBQVdFLFNBQVNIO0FBQzVDO0FBRUEsU0FBU1UsVUFBVUYsYUFBYSxFQUFFUixPQUFPLEVBQUU7SUFDdkMsSUFBTUMsWUFBWVEsNkJBQWlCLEVBQzdCTixVQUFVSyxlQUFnQixHQUFHO0lBRXJDLElBQUksQ0FBQ0YsbUJBQW1CLENBQUNMLFdBQVdFLFNBQVNIO0FBQy9DO0FBRUEsU0FBU1cscUJBQXFCO0lBQzVCLElBQU1WLFlBQVlDLDZCQUFpQixFQUM3QlUsaUJBQWlCLElBQUksQ0FBQ0Msa0JBQWtCLENBQUNaO0lBRS9DVyxlQUFlRSxPQUFPLENBQUMsU0FBQ0MsZUFBa0I7UUFDeEMsSUFBUVosVUFBcUJZLGNBQXJCWixTQUFTSCxVQUFZZSxjQUFaZixTQUNYRCxnQkFBZ0JJLFNBQVUsR0FBRztRQUVuQ0osY0FBY2lCLElBQUksQ0FBQ2hCO0lBQ3JCO0FBQ0Y7QUFFQSxTQUFTaUIscUJBQXFCO0lBQzFCLElBQU1oQixZQUFZUSw2QkFBaUIsRUFDN0JHLGlCQUFpQixJQUFJLENBQUNDLGtCQUFrQixDQUFDWjtJQUVqRFcsZUFBZUUsT0FBTyxDQUFDLFNBQUNDLGVBQWtCO1FBQ3hDLElBQVFaLFVBQXFCWSxjQUFyQlosU0FBU0gsVUFBWWUsY0FBWmYsU0FDWFEsZ0JBQWdCTCxTQUFVLEdBQUc7UUFFbkNLLGNBQWNRLElBQUksQ0FBQ2hCO0lBQ3JCO0FBQ0Y7QUFFQSxJQUFNa0IsaUJBQWlCO0lBQ3JCcEIsVUFBQUE7SUFDQU8sV0FBQUE7SUFDQUUsVUFBQUE7SUFDQUcsV0FBQUE7SUFDQUMsb0JBQUFBO0lBQ0FNLG9CQUFBQTtBQUNGO0lBRUEsV0FBZUMifQ==