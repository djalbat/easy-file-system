"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _necessary = require("necessary");
var _eventTypes = require("../eventTypes");
var forEach = _necessary.asynchronousUtilities.forEach;
function onOpen(openHandler, element) {
    var eventType = _eventTypes.OPEN_EVENT_TYPE, handler = openHandler; ///
    this.addEventListener(eventType, handler, element);
}
function offOpen(openHandler, element) {
    var eventType = _eventTypes.OPEN_EVENT_TYPE, handler = openHandler; ///
    this.removeEventListener(eventType, handler, element);
}
function onEdit(renameHandler, element) {
    var eventType = _eventTypes.EDIT_EVENT_TYPE, handler = renameHandler; ///
    this.addEventListener(eventType, handler, element);
}
function offEdit(renameHandler, element) {
    var eventType = _eventTypes.EDIT_EVENT_TYPE, handler = renameHandler; ///
    this.removeEventListener(eventType, handler, element);
}
function onMove(moveHandler, element) {
    var eventType = _eventTypes.MOVE_EVENT_TYPE, handler = moveHandler; ///
    this.addEventListener(eventType, handler, element);
}
function offMove(moveHandler, element) {
    var eventType = _eventTypes.MOVE_EVENT_TYPE, handler = moveHandler; ///
    this.removeEventListener(eventType, handler, element);
}
function onRemove(removeHandler, element) {
    var eventType = _eventTypes.REMOVE_EVENT_TYPE, handler = removeHandler; ///
    this.addEventListener(eventType, handler, element);
}
function offRemove(removeHandler, element) {
    var eventType = _eventTypes.REMOVE_EVENT_TYPE, handler = removeHandler; ///
    this.removeEventListener(eventType, handler, element);
}
function onCreate(createHandler, element) {
    var eventType = _eventTypes.CREATE_EVENT_TYPE, handler = createHandler; ///
    this.addEventListener(eventType, handler, element);
}
function offCreate(createHandler, element) {
    var eventType = _eventTypes.CREATE_EVENT_TYPE, handler = createHandler; ///
    this.removeEventListener(eventType, handler, element);
}
function onSelect(selectHandler, element) {
    var eventType = _eventTypes.SELECT_EVENT_TYPE, handler = selectHandler; ///
    this.addEventListener(eventType, handler, element);
}
function offSelect(selectHandler, element) {
    var eventType = _eventTypes.SELECT_EVENT_TYPE, handler = selectHandler; ///
    this.removeEventListener(eventType, handler, element);
}
function callOpenHandlers(filePath, explorer) {
    var _this = this;
    var eventType = _eventTypes.OPEN_EVENT_TYPE, eventListeners = this.findEventListeners(eventType);
    eventListeners.forEach(function(eventListener) {
        var handler = eventListener.handler, element = eventListener.element, openHandler = handler; ///
        openHandler.call(element, filePath, explorer, _this); ///
    });
}
function callSelectHandlers(path, selected, readOnly, explorer) {
    var _this = this;
    var eventType = _eventTypes.SELECT_EVENT_TYPE, eventListeners = this.findEventListeners(eventType);
    eventListeners.forEach(function(eventListener) {
        var handler = eventListener.handler, element = eventListener.element, selectHandler = handler; ///
        selectHandler.call(element, path, selected, readOnly, explorer, _this); ///
    });
}
function callEditHandlersAsync(pathMaps, explorer, done) {
    var eventType = _eventTypes.EDIT_EVENT_TYPE, eventListeners = this.findEventListeners(eventType);
    forEach(eventListeners, function(eventListener, next) {
        var handler = eventListener.handler, element = eventListener.element, renameHandler = handler, _$done = next; ///
        renameHandler.call(element, pathMaps, explorer, _$done);
    }, done);
}
function callMoveHandlersAsync(pathMaps, explorer, done) {
    var eventType = _eventTypes.MOVE_EVENT_TYPE, eventListeners = this.findEventListeners(eventType);
    forEach(eventListeners, function(eventListener, next) {
        var handler = eventListener.handler, element = eventListener.element, moveHandler = handler, _$done = next; ///
        moveHandler.call(element, pathMaps, explorer, _$done);
    }, done);
}
function callRemoveHandlersAsync(pathMaps, explorer, done) {
    var eventType = _eventTypes.REMOVE_EVENT_TYPE, eventListeners = this.findEventListeners(eventType);
    forEach(eventListeners, function(eventListener, next) {
        var handler = eventListener.handler, element = eventListener.element, removeHandler = handler, _$done = next; ///
        removeHandler.call(element, pathMaps, explorer, _$done);
    }, done);
}
function callCreateHandlersAsync(pathMaps, explorer, done) {
    var eventType = _eventTypes.CREATE_EVENT_TYPE, eventListeners = this.findEventListeners(eventType);
    forEach(eventListeners, function(eventListener, next) {
        var handler = eventListener.handler, element = eventListener.element, createHandler = handler, _$done = next; ///
        createHandler.call(element, pathMaps, explorer, _$done);
    }, done);
}
var explorerMixins = {
    onOpen: onOpen,
    offOpen: offOpen,
    onMove: onMove,
    offMove: offMove,
    onEdit: onEdit,
    offEdit: offEdit,
    onRemove: onRemove,
    offRemove: offRemove,
    onCreate: onCreate,
    offCreate: offCreate,
    onSelect: onSelect,
    offSelect: offSelect,
    callOpenHandlers: callOpenHandlers,
    callSelectHandlers: callSelectHandlers,
    callEditHandlersAsync: callEditHandlersAsync,
    callMoveHandlersAsync: callMoveHandlersAsync,
    callRemoveHandlersAsync: callRemoveHandlersAsync,
    callCreateHandlersAsync: callCreateHandlersAsync
};
var _default = explorerMixins;

//# sourceMappingURL=data:application/json;base64,