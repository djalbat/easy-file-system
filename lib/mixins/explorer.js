"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _necessary = require("necessary");
var _eventTypes = require("../eventTypes");
var forEach = _necessary.asynchronousUtilities.forEach;
function onMove(moveHandler, element) {
    var eventType = _eventTypes.MOVE_EVENT_TYPE, handler = moveHandler; ///
    this.addEventListener(eventType, handler, element);
}
function offMove(moveHandler, element) {
    var eventType = _eventTypes.MOVE_EVENT_TYPE, handler = moveHandler; ///
    this.removeEventListener(eventType, handler, element);
}
function onOpen(openHandler, element) {
    var eventType = _eventTypes.OPEN_EVENT_TYPE, handler = openHandler; ///
    this.addEventListener(eventType, handler, element);
}
function offOpen(openHandler, element) {
    var eventType = _eventTypes.OPEN_EVENT_TYPE, handler = openHandler; ///
    this.removeEventListener(eventType, handler, element);
}
function onSelect(selectHandler, element) {
    var eventType = _eventTypes.SELECT_EVENT_TYPE, handler = selectHandler; ///
    this.addEventListener(eventType, handler, element);
}
function offSelect(selectHandler, element) {
    var eventType = _eventTypes.SELECT_EVENT_TYPE, handler = selectHandler; ///
    this.removeEventListener(eventType, handler, element);
}
function onPathChange(pathChangeHandler, element) {
    var eventType = _eventTypes.PATH_CHANGE_EVENT_TYPE, handler = pathChangeHandler; ///
    this.addEventListener(eventType, handler, element);
}
function offPathChange(pathChangeHandler, element) {
    var eventType = _eventTypes.PATH_CHANGE_EVENT_TYPE, handler = pathChangeHandler; ///
    this.removeEventListener(eventType, handler, element);
}
function callOpenHandlers(filePath) {
    var _this = this;
    var eventType = _eventTypes.OPEN_EVENT_TYPE, eventListeners = this.findEventListeners(eventType);
    eventListeners.forEach(function(eventListener) {
        var handler = eventListener.handler, element = eventListener.element, openHandler = handler; ///
        openHandler.call(element, filePath, _this); ///
    });
}
function callSelectHandlers(path, selected) {
    var _this = this;
    var eventType = _eventTypes.SELECT_EVENT_TYPE, eventListeners = this.findEventListeners(eventType);
    eventListeners.forEach(function(eventListener) {
        var handler = eventListener.handler, element = eventListener.element, selectHandler = handler; ///
        selectHandler.call(element, path, selected, _this); ///
    });
}
function callMoveHandlersAsync(pathMaps, done) {
    var eventType = _eventTypes.MOVE_EVENT_TYPE, eventListeners = this.findEventListeners(eventType);
    forEach(eventListeners, function(eventListener, next) {
        var handler = eventListener.handler, element = eventListener.element, moveHandler = handler, _$done = next; ///
        moveHandler.call(element, pathMaps, _$done);
    }, done);
}
function callPathChangeHandlersAsync(pathMap, done) {
    var eventType = _eventTypes.PATH_CHANGE_EVENT_TYPE, eventListeners = this.findEventListeners(eventType);
    forEach(eventListeners, function(eventListener, next) {
        var handler = eventListener.handler, element = eventListener.element, pathChangeHandler = handler, _$done = next; ///
        pathChangeHandler.call(element, pathMap, _$done);
    }, done);
}
var eventMixins = {
    onMove: onMove,
    offMove: offMove,
    onOpen: onOpen,
    offOpen: offOpen,
    onSelect: onSelect,
    offSelect: offSelect,
    onPathChange: onPathChange,
    offPathChange: offPathChange,
    callOpenHandlers: callOpenHandlers,
    callSelectHandlers: callSelectHandlers,
    callMoveHandlersAsync: callMoveHandlersAsync,
    callPathChangeHandlersAsync: callPathChangeHandlersAsync
};
var _default = eventMixins;

//# sourceMappingURL=data:application/json;base64,