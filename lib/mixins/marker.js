"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _path = require("../utilities/path");
var _options = require("../options");
function enableMarker() {
    this.onDragOver(dragOverHandler, this);
}
function disableMarker() {
    this.offDragOver(dragOverHandler, this);
}
function dragOverHandler(dragElement, element) {
    var collapsed = this.isCollapsed();
    if (collapsed) {
        return;
    }
    var path = this.getPath(), explorer = this.getExplorer(), dragEntryItem = dragElement, markerEntryItem = this.retrieveMarkerEntryItem(), dragEntryItemIgnored = dragEntryItem.isIgnored(explorer);
    if (dragEntryItemIgnored) {
        return;
    }
    var dragIntoTopmostDirectoriesOnlyOptionPresent = explorer.isOptionPresent(_options.DRAG_INTO_TOPMOST_DIRECTORIES_ONLY);
    if (dragIntoTopmostDirectoriesOnlyOptionPresent) {
        var pathTopmostPath = (0, _path).isPathTopmostPath(path);
        if (!pathTopmostPath) {
            return;
        }
    }
    var dragEntryItemName = dragEntryItem.getName(), markerEntryItemPath = markerEntryItem.getPath(), oldMarkerEntryItemPath = markerEntryItemPath, newMarkerEntryItemPath = path === null ? dragEntryItemName : "".concat(path, "/").concat(dragEntryItemName), markerEntryItemExplorer = markerEntryItem.getExplorer(), oldMarkerEntryItemExplorer = markerEntryItemExplorer, newMarkerEntryItemExplorer = explorer; ///
    if (oldMarkerEntryItemExplorer !== newMarkerEntryItemExplorer || oldMarkerEntryItemPath !== newMarkerEntryItemPath) {
        var dragEntryItemType = dragEntryItem.getType(), markerEntryItemPath1 = newMarkerEntryItemPath; ///
        explorer.removeMarker();
        explorer.addMarker(markerEntryItemPath1, dragEntryItemType);
    }
}
var _default = {
    enableMarker: enableMarker,
    disableMarker: disableMarker
};
exports.default = _default;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taXhpbnMvbWFya2VyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBpc1BhdGhUb3Btb3N0UGF0aCB9IGZyb20gXCIuLi91dGlsaXRpZXMvcGF0aFwiO1xuaW1wb3J0IHsgRFJBR19JTlRPX1RPUE1PU1RfRElSRUNUT1JJRVNfT05MWSB9IGZyb20gXCIuLi9vcHRpb25zXCI7XG5cbmZ1bmN0aW9uIGVuYWJsZU1hcmtlcigpIHtcbiAgdGhpcy5vbkRyYWdPdmVyKGRyYWdPdmVySGFuZGxlciwgdGhpcyk7XG59XG5cbmZ1bmN0aW9uIGRpc2FibGVNYXJrZXIoKSB7XG4gIHRoaXMub2ZmRHJhZ092ZXIoZHJhZ092ZXJIYW5kbGVyLCB0aGlzKTtcbn1cblxuZnVuY3Rpb24gZHJhZ092ZXJIYW5kbGVyKGRyYWdFbGVtZW50LCBlbGVtZW50KSB7XG4gIGNvbnN0IGNvbGxhcHNlZCA9IHRoaXMuaXNDb2xsYXBzZWQoKTtcblxuICBpZiAoY29sbGFwc2VkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgcGF0aCA9IHRoaXMuZ2V0UGF0aCgpLFxuICAgICAgICBleHBsb3JlciA9IHRoaXMuZ2V0RXhwbG9yZXIoKSxcbiAgICAgICAgZHJhZ0VudHJ5SXRlbSA9IGRyYWdFbGVtZW50LCAgLy8vXG4gICAgICAgIG1hcmtlckVudHJ5SXRlbSA9IHRoaXMucmV0cmlldmVNYXJrZXJFbnRyeUl0ZW0oKSxcbiAgICAgICAgZHJhZ0VudHJ5SXRlbUlnbm9yZWQgPSBkcmFnRW50cnlJdGVtLmlzSWdub3JlZChleHBsb3Jlcik7XG5cbiAgaWYgKGRyYWdFbnRyeUl0ZW1JZ25vcmVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgZHJhZ0ludG9Ub3Btb3N0RGlyZWN0b3JpZXNPbmx5T3B0aW9uUHJlc2VudCA9IGV4cGxvcmVyLmlzT3B0aW9uUHJlc2VudChEUkFHX0lOVE9fVE9QTU9TVF9ESVJFQ1RPUklFU19PTkxZKTtcblxuICBpZiAoZHJhZ0ludG9Ub3Btb3N0RGlyZWN0b3JpZXNPbmx5T3B0aW9uUHJlc2VudCkge1xuICAgIGNvbnN0IHBhdGhUb3Btb3N0UGF0aCA9IGlzUGF0aFRvcG1vc3RQYXRoKHBhdGgpO1xuXG4gICAgaWYgKCFwYXRoVG9wbW9zdFBhdGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cblxuICBjb25zdCBkcmFnRW50cnlJdGVtTmFtZSA9IGRyYWdFbnRyeUl0ZW0uZ2V0TmFtZSgpLFxuICAgICAgICBtYXJrZXJFbnRyeUl0ZW1QYXRoID0gbWFya2VyRW50cnlJdGVtLmdldFBhdGgoKSxcbiAgICAgICAgb2xkTWFya2VyRW50cnlJdGVtUGF0aCA9IG1hcmtlckVudHJ5SXRlbVBhdGgsIC8vL1xuICAgICAgICBuZXdNYXJrZXJFbnRyeUl0ZW1QYXRoID0gKHBhdGggPT09IG51bGwpID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJhZ0VudHJ5SXRlbU5hbWUgOiAvLy9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgJHtwYXRofS8ke2RyYWdFbnRyeUl0ZW1OYW1lfWAsXG4gICAgICAgIG1hcmtlckVudHJ5SXRlbUV4cGxvcmVyID0gbWFya2VyRW50cnlJdGVtLmdldEV4cGxvcmVyKCksXG4gICAgICAgIG9sZE1hcmtlckVudHJ5SXRlbUV4cGxvcmVyID0gbWFya2VyRW50cnlJdGVtRXhwbG9yZXIsIC8vL1xuICAgICAgICBuZXdNYXJrZXJFbnRyeUl0ZW1FeHBsb3JlciA9IGV4cGxvcmVyOyAgLy8vXG5cbiAgaWYgKChvbGRNYXJrZXJFbnRyeUl0ZW1FeHBsb3JlciAhPT0gbmV3TWFya2VyRW50cnlJdGVtRXhwbG9yZXIpIHx8IChvbGRNYXJrZXJFbnRyeUl0ZW1QYXRoICE9PSBuZXdNYXJrZXJFbnRyeUl0ZW1QYXRoKSkge1xuICAgIGNvbnN0IGRyYWdFbnRyeUl0ZW1UeXBlID0gZHJhZ0VudHJ5SXRlbS5nZXRUeXBlKCksXG4gICAgICAgICAgbWFya2VyRW50cnlJdGVtUGF0aCA9IG5ld01hcmtlckVudHJ5SXRlbVBhdGg7IC8vL1xuXG4gICAgZXhwbG9yZXIucmVtb3ZlTWFya2VyKCk7XG5cbiAgICBleHBsb3Jlci5hZGRNYXJrZXIobWFya2VyRW50cnlJdGVtUGF0aCwgZHJhZ0VudHJ5SXRlbVR5cGUpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZW5hYmxlTWFya2VyLFxuICBkaXNhYmxlTWFya2VyXG59O1xuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJDQUFBLFVBQVk7Ozs7O0lBRXNCLEtBQW1CO0lBQ0YsUUFBWTtTQUV0RCxZQUFZO1NBQ2QsVUFBVSxDQUFDLGVBQWU7O1NBR3hCLGFBQWE7U0FDZixXQUFXLENBQUMsZUFBZTs7U0FHekIsZUFBZSxDQUFDLFdBQVcsRUFBRSxPQUFPO1FBQ3JDLFNBQVMsUUFBUSxXQUFXO1FBRTlCLFNBQVM7OztRQUlQLElBQUksUUFBUSxPQUFPLElBQ25CLFFBQVEsUUFBUSxXQUFXLElBQzNCLGFBQWEsR0FBRyxXQUFXLEVBQzNCLGVBQWUsUUFBUSx1QkFBdUIsSUFDOUMsb0JBQW9CLEdBQUcsYUFBYSxDQUFDLFNBQVMsQ0FBQyxRQUFRO1FBRXpELG9CQUFvQjs7O1FBSWxCLDJDQUEyQyxHQUFHLFFBQVEsQ0FBQyxlQUFlLENBM0IzQixRQUFZO1FBNkJ6RCwyQ0FBMkM7WUFDdkMsZUFBZSxPQS9CUyxLQUFtQixvQkErQlAsSUFBSTthQUV6QyxlQUFlOzs7O1FBS2hCLGlCQUFpQixHQUFHLGFBQWEsQ0FBQyxPQUFPLElBQ3pDLG1CQUFtQixHQUFHLGVBQWUsQ0FBQyxPQUFPLElBQzdDLHNCQUFzQixHQUFHLG1CQUFtQixFQUM1QyxzQkFBc0IsR0FBSSxJQUFJLEtBQUssSUFBSSxHQUNaLGlCQUFpQixNQUNKLE1BQWlCLENBQXpCLElBQUksR0FBQyxDQUFDLEdBQW9CLE1BQUEsQ0FBbEIsaUJBQWlCLEdBQ3pELHVCQUF1QixHQUFHLGVBQWUsQ0FBQyxXQUFXLElBQ3JELDBCQUEwQixHQUFHLHVCQUF1QixFQUNwRCwwQkFBMEIsR0FBRyxRQUFRLENBQUcsQ0FBRyxBQUFILEVBQUcsQUFBSCxDQUFHO1FBRTVDLDBCQUEwQixLQUFLLDBCQUEwQixJQUFNLHNCQUFzQixLQUFLLHNCQUFzQjtZQUM3RyxpQkFBaUIsR0FBRyxhQUFhLENBQUMsT0FBTyxJQUN6QyxvQkFBbUIsR0FBRyxzQkFBc0IsQ0FBRSxDQUFHLEFBQUgsRUFBRyxBQUFILENBQUc7UUFFdkQsUUFBUSxDQUFDLFlBQVk7UUFFckIsUUFBUSxDQUFDLFNBQVMsQ0FBQyxvQkFBbUIsRUFBRSxpQkFBaUI7Ozs7SUFLM0QsWUFBWSxFQUFaLFlBQVk7SUFDWixhQUFhLEVBQWIsYUFBYSJ9