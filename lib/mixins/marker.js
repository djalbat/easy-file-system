"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _path = require("../utilities/path");
var _options = require("../options");
function enableMarker() {
    this.onDragOver(dragOverHandler, this);
}
function disableMarker() {
    this.offDragOver(dragOverHandler, this);
}
function dragOverHandler(dragElement, element) {
    var collapsed = this.isCollapsed();
    if (collapsed) {
        return;
    }
    var path = this.getPath(), explorer = this.getExplorer(), dragEntryItem = dragElement, markerEntryItem = this.retrieveMarkerEntryItem(), dragEntryItemIgnored = dragEntryItem.isIgnored(explorer);
    if (dragEntryItemIgnored) {
        return;
    }
    var dragIntoTopmostDirectoriesOnlyOptionPresent = explorer.isOptionPresent(_options.DRAG_INTO_TOPMOST_DIRECTORIES_ONLY_OPTION);
    if (dragIntoTopmostDirectoriesOnlyOptionPresent) {
        var pathTopmostPath = (0, _path).isPathTopmostPath(path);
        if (!pathTopmostPath) {
            return;
        }
    }
    var dragEntryItemName = dragEntryItem.getName(), markerEntryItemPath = markerEntryItem.getPath(), oldMarkerEntryItemPath = markerEntryItemPath, newMarkerEntryItemPath = path === null ? dragEntryItemName : "".concat(path, "/").concat(dragEntryItemName), markerEntryItemExplorer = markerEntryItem.getExplorer(), oldMarkerEntryItemExplorer = markerEntryItemExplorer, newMarkerEntryItemExplorer = explorer; ///
    if (oldMarkerEntryItemExplorer !== newMarkerEntryItemExplorer || oldMarkerEntryItemPath !== newMarkerEntryItemPath) {
        var dragEntryItemType = dragEntryItem.getType(), markerEntryItemPath1 = newMarkerEntryItemPath; ///
        explorer.removeMarker();
        explorer.addMarker(markerEntryItemPath1, dragEntryItemType);
    }
}
var _default = {
    enableMarker: enableMarker,
    disableMarker: disableMarker
};
exports.default = _default;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taXhpbnMvbWFya2VyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBpc1BhdGhUb3Btb3N0UGF0aCB9IGZyb20gXCIuLi91dGlsaXRpZXMvcGF0aFwiO1xuaW1wb3J0IHsgRFJBR19JTlRPX1RPUE1PU1RfRElSRUNUT1JJRVNfT05MWV9PUFRJT04gfSBmcm9tIFwiLi4vb3B0aW9uc1wiO1xuXG5mdW5jdGlvbiBlbmFibGVNYXJrZXIoKSB7XG4gIHRoaXMub25EcmFnT3ZlcihkcmFnT3ZlckhhbmRsZXIsIHRoaXMpO1xufVxuXG5mdW5jdGlvbiBkaXNhYmxlTWFya2VyKCkge1xuICB0aGlzLm9mZkRyYWdPdmVyKGRyYWdPdmVySGFuZGxlciwgdGhpcyk7XG59XG5cbmZ1bmN0aW9uIGRyYWdPdmVySGFuZGxlcihkcmFnRWxlbWVudCwgZWxlbWVudCkge1xuICBjb25zdCBjb2xsYXBzZWQgPSB0aGlzLmlzQ29sbGFwc2VkKCk7XG5cbiAgaWYgKGNvbGxhcHNlZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHBhdGggPSB0aGlzLmdldFBhdGgoKSxcbiAgICAgICAgZXhwbG9yZXIgPSB0aGlzLmdldEV4cGxvcmVyKCksXG4gICAgICAgIGRyYWdFbnRyeUl0ZW0gPSBkcmFnRWxlbWVudCwgIC8vL1xuICAgICAgICBtYXJrZXJFbnRyeUl0ZW0gPSB0aGlzLnJldHJpZXZlTWFya2VyRW50cnlJdGVtKCksXG4gICAgICAgIGRyYWdFbnRyeUl0ZW1JZ25vcmVkID0gZHJhZ0VudHJ5SXRlbS5pc0lnbm9yZWQoZXhwbG9yZXIpO1xuXG4gIGlmIChkcmFnRW50cnlJdGVtSWdub3JlZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IGRyYWdJbnRvVG9wbW9zdERpcmVjdG9yaWVzT25seU9wdGlvblByZXNlbnQgPSBleHBsb3Jlci5pc09wdGlvblByZXNlbnQoRFJBR19JTlRPX1RPUE1PU1RfRElSRUNUT1JJRVNfT05MWV9PUFRJT04pO1xuXG4gIGlmIChkcmFnSW50b1RvcG1vc3REaXJlY3Rvcmllc09ubHlPcHRpb25QcmVzZW50KSB7XG4gICAgY29uc3QgcGF0aFRvcG1vc3RQYXRoID0gaXNQYXRoVG9wbW9zdFBhdGgocGF0aCk7XG5cbiAgICBpZiAoIXBhdGhUb3Btb3N0UGF0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGRyYWdFbnRyeUl0ZW1OYW1lID0gZHJhZ0VudHJ5SXRlbS5nZXROYW1lKCksXG4gICAgICAgIG1hcmtlckVudHJ5SXRlbVBhdGggPSBtYXJrZXJFbnRyeUl0ZW0uZ2V0UGF0aCgpLFxuICAgICAgICBvbGRNYXJrZXJFbnRyeUl0ZW1QYXRoID0gbWFya2VyRW50cnlJdGVtUGF0aCwgLy8vXG4gICAgICAgIG5ld01hcmtlckVudHJ5SXRlbVBhdGggPSAocGF0aCA9PT0gbnVsbCkgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcmFnRW50cnlJdGVtTmFtZSA6IC8vL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAke3BhdGh9LyR7ZHJhZ0VudHJ5SXRlbU5hbWV9YCxcbiAgICAgICAgbWFya2VyRW50cnlJdGVtRXhwbG9yZXIgPSBtYXJrZXJFbnRyeUl0ZW0uZ2V0RXhwbG9yZXIoKSxcbiAgICAgICAgb2xkTWFya2VyRW50cnlJdGVtRXhwbG9yZXIgPSBtYXJrZXJFbnRyeUl0ZW1FeHBsb3JlciwgLy8vXG4gICAgICAgIG5ld01hcmtlckVudHJ5SXRlbUV4cGxvcmVyID0gZXhwbG9yZXI7ICAvLy9cblxuICBpZiAoKG9sZE1hcmtlckVudHJ5SXRlbUV4cGxvcmVyICE9PSBuZXdNYXJrZXJFbnRyeUl0ZW1FeHBsb3JlcikgfHwgKG9sZE1hcmtlckVudHJ5SXRlbVBhdGggIT09IG5ld01hcmtlckVudHJ5SXRlbVBhdGgpKSB7XG4gICAgY29uc3QgZHJhZ0VudHJ5SXRlbVR5cGUgPSBkcmFnRW50cnlJdGVtLmdldFR5cGUoKSxcbiAgICAgICAgICBtYXJrZXJFbnRyeUl0ZW1QYXRoID0gbmV3TWFya2VyRW50cnlJdGVtUGF0aDsgLy8vXG5cbiAgICBleHBsb3Jlci5yZW1vdmVNYXJrZXIoKTtcblxuICAgIGV4cGxvcmVyLmFkZE1hcmtlcihtYXJrZXJFbnRyeUl0ZW1QYXRoLCBkcmFnRW50cnlJdGVtVHlwZSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBlbmFibGVNYXJrZXIsXG4gIGRpc2FibGVNYXJrZXJcbn07XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkNBQUEsVUFBWTs7Ozs7SUFFc0IsS0FBbUI7SUFDSyxRQUFZO1NBRTdELFlBQVk7U0FDZCxVQUFVLENBQUMsZUFBZTs7U0FHeEIsYUFBYTtTQUNmLFdBQVcsQ0FBQyxlQUFlOztTQUd6QixlQUFlLENBQUMsV0FBVyxFQUFFLE9BQU87UUFDckMsU0FBUyxRQUFRLFdBQVc7UUFFOUIsU0FBUzs7O1FBSVAsSUFBSSxRQUFRLE9BQU8sSUFDbkIsUUFBUSxRQUFRLFdBQVcsSUFDM0IsYUFBYSxHQUFHLFdBQVcsRUFDM0IsZUFBZSxRQUFRLHVCQUF1QixJQUM5QyxvQkFBb0IsR0FBRyxhQUFhLENBQUMsU0FBUyxDQUFDLFFBQVE7UUFFekQsb0JBQW9COzs7UUFJbEIsMkNBQTJDLEdBQUcsUUFBUSxDQUFDLGVBQWUsQ0EzQnBCLFFBQVk7UUE2QmhFLDJDQUEyQztZQUN2QyxlQUFlLE9BL0JTLEtBQW1CLG9CQStCUCxJQUFJO2FBRXpDLGVBQWU7Ozs7UUFLaEIsaUJBQWlCLEdBQUcsYUFBYSxDQUFDLE9BQU8sSUFDekMsbUJBQW1CLEdBQUcsZUFBZSxDQUFDLE9BQU8sSUFDN0Msc0JBQXNCLEdBQUcsbUJBQW1CLEVBQzVDLHNCQUFzQixHQUFJLElBQUksS0FBSyxJQUFJLEdBQ1osaUJBQWlCLE1BQ0osTUFBaUIsQ0FBekIsSUFBSSxHQUFDLENBQUMsR0FBb0IsTUFBQSxDQUFsQixpQkFBaUIsR0FDekQsdUJBQXVCLEdBQUcsZUFBZSxDQUFDLFdBQVcsSUFDckQsMEJBQTBCLEdBQUcsdUJBQXVCLEVBQ3BELDBCQUEwQixHQUFHLFFBQVEsQ0FBRyxDQUFHLEFBQUgsRUFBRyxBQUFILENBQUc7UUFFNUMsMEJBQTBCLEtBQUssMEJBQTBCLElBQU0sc0JBQXNCLEtBQUssc0JBQXNCO1lBQzdHLGlCQUFpQixHQUFHLGFBQWEsQ0FBQyxPQUFPLElBQ3pDLG9CQUFtQixHQUFHLHNCQUFzQixDQUFFLENBQUcsQUFBSCxFQUFHLEFBQUgsQ0FBRztRQUV2RCxRQUFRLENBQUMsWUFBWTtRQUVyQixRQUFRLENBQUMsU0FBUyxDQUFDLG9CQUFtQixFQUFFLGlCQUFpQjs7OztJQUszRCxZQUFZLEVBQVosWUFBWTtJQUNaLGFBQWEsRUFBYixhQUFhIn0=