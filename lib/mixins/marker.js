"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _options = require("../options");
function enableMarker() {
    this.onDragOver(dragOverHandler, this);
}
function disableMarker() {
    this.offDragOver(dragOverHandler, this);
}
function dragOverHandler(dragElement, element) {
    var collapsed = this.isCollapsed();
    if (collapsed) {
        return;
    }
    var dragEntryItem = dragElement, dragEntryItemExplorer = dragEntryItem.getExplorer(), removeOnlyOptionPresent = dragEntryItemExplorer.isOptionPresent(_options.REMOVE_ONLY);
    if (removeOnlyOptionPresent) {
        console.log("remove only");
        return;
    }
    var path = this.getPath(), explorer = this.getExplorer(), markerEntryItem = this.retrieveMarkerEntryItem(), dragEntryItemName = dragEntryItem.getName(), markerEntryItemPath = markerEntryItem.getPath(), oldMarkerEntryItemPath = markerEntryItemPath, newMarkerEntryItemPath = path === null ? dragEntryItemName : "".concat(path, "/").concat(dragEntryItemName), markerEntryItemExplorer = markerEntryItem.getExplorer(), oldMarkerEntryItemExplorer = markerEntryItemExplorer, newMarkerEntryItemExplorer = explorer; ///
    if (oldMarkerEntryItemExplorer !== newMarkerEntryItemExplorer || oldMarkerEntryItemPath !== newMarkerEntryItemPath) {
        var dragEntryItemType = dragEntryItem.getType(), markerEntryItemPath1 = newMarkerEntryItemPath; ///
        explorer.removeMarker();
        explorer.addMarker(markerEntryItemPath1, dragEntryItemType);
    }
}
var _default = {
    enableMarker: enableMarker,
    disableMarker: disableMarker
};
exports.default = _default;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taXhpbnMvbWFya2VyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBSRU1PVkVfT05MWSB9IGZyb20gXCIuLi9vcHRpb25zXCI7XG5cbmZ1bmN0aW9uIGVuYWJsZU1hcmtlcigpIHtcbiAgdGhpcy5vbkRyYWdPdmVyKGRyYWdPdmVySGFuZGxlciwgdGhpcyk7XG59XG5cbmZ1bmN0aW9uIGRpc2FibGVNYXJrZXIoKSB7XG4gIHRoaXMub2ZmRHJhZ092ZXIoZHJhZ092ZXJIYW5kbGVyLCB0aGlzKTtcbn1cblxuZnVuY3Rpb24gZHJhZ092ZXJIYW5kbGVyKGRyYWdFbGVtZW50LCBlbGVtZW50KSB7XG4gIGNvbnN0IGNvbGxhcHNlZCA9IHRoaXMuaXNDb2xsYXBzZWQoKTtcblxuICBpZiAoY29sbGFwc2VkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgZHJhZ0VudHJ5SXRlbSA9IGRyYWdFbGVtZW50LCAgLy8vXG4gICAgICAgIGRyYWdFbnRyeUl0ZW1FeHBsb3JlciA9IGRyYWdFbnRyeUl0ZW0uZ2V0RXhwbG9yZXIoKSxcbiAgICAgICAgcmVtb3ZlT25seU9wdGlvblByZXNlbnQgPSBkcmFnRW50cnlJdGVtRXhwbG9yZXIuaXNPcHRpb25QcmVzZW50KFJFTU9WRV9PTkxZKTtcblxuICBpZiAocmVtb3ZlT25seU9wdGlvblByZXNlbnQpIHtcbiAgICBjb25zb2xlLmxvZyhcInJlbW92ZSBvbmx5XCIpXG5cbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBwYXRoID0gdGhpcy5nZXRQYXRoKCksXG4gICAgICAgIGV4cGxvcmVyID0gdGhpcy5nZXRFeHBsb3JlcigpLFxuICAgICAgICBtYXJrZXJFbnRyeUl0ZW0gPSB0aGlzLnJldHJpZXZlTWFya2VyRW50cnlJdGVtKCksXG4gICAgICAgIGRyYWdFbnRyeUl0ZW1OYW1lID0gZHJhZ0VudHJ5SXRlbS5nZXROYW1lKCksXG4gICAgICAgIG1hcmtlckVudHJ5SXRlbVBhdGggPSBtYXJrZXJFbnRyeUl0ZW0uZ2V0UGF0aCgpLFxuICAgICAgICBvbGRNYXJrZXJFbnRyeUl0ZW1QYXRoID0gbWFya2VyRW50cnlJdGVtUGF0aCwgLy8vXG4gICAgICAgIG5ld01hcmtlckVudHJ5SXRlbVBhdGggPSAocGF0aCA9PT0gbnVsbCkgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcmFnRW50cnlJdGVtTmFtZSA6IC8vL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAke3BhdGh9LyR7ZHJhZ0VudHJ5SXRlbU5hbWV9YCxcbiAgICAgICAgbWFya2VyRW50cnlJdGVtRXhwbG9yZXIgPSBtYXJrZXJFbnRyeUl0ZW0uZ2V0RXhwbG9yZXIoKSxcbiAgICAgICAgb2xkTWFya2VyRW50cnlJdGVtRXhwbG9yZXIgPSBtYXJrZXJFbnRyeUl0ZW1FeHBsb3JlciwgLy8vXG4gICAgICAgIG5ld01hcmtlckVudHJ5SXRlbUV4cGxvcmVyID0gZXhwbG9yZXI7ICAvLy9cblxuICBpZiAoKG9sZE1hcmtlckVudHJ5SXRlbUV4cGxvcmVyICE9PSBuZXdNYXJrZXJFbnRyeUl0ZW1FeHBsb3JlcikgfHwgKG9sZE1hcmtlckVudHJ5SXRlbVBhdGggIT09IG5ld01hcmtlckVudHJ5SXRlbVBhdGgpKSB7XG4gICAgY29uc3QgZHJhZ0VudHJ5SXRlbVR5cGUgPSBkcmFnRW50cnlJdGVtLmdldFR5cGUoKSxcbiAgICAgICAgICBtYXJrZXJFbnRyeUl0ZW1QYXRoID0gbmV3TWFya2VyRW50cnlJdGVtUGF0aDsgLy8vXG5cbiAgICBleHBsb3Jlci5yZW1vdmVNYXJrZXIoKTtcblxuICAgIGV4cGxvcmVyLmFkZE1hcmtlcihtYXJrZXJFbnRyeUl0ZW1QYXRoLCBkcmFnRW50cnlJdGVtVHlwZSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBlbmFibGVNYXJrZXIsXG4gIGRpc2FibGVNYXJrZXJcbn07XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkNBQUEsVUFBWTs7Ozs7SUFFZ0IsUUFBWTtTQUUvQixZQUFZO1NBQ2QsVUFBVSxDQUFDLGVBQWU7O1NBR3hCLGFBQWE7U0FDZixXQUFXLENBQUMsZUFBZTs7U0FHekIsZUFBZSxDQUFDLFdBQVcsRUFBRSxPQUFPO1FBQ3JDLFNBQVMsUUFBUSxXQUFXO1FBRTlCLFNBQVM7OztRQUlQLGFBQWEsR0FBRyxXQUFXLEVBQzNCLHFCQUFxQixHQUFHLGFBQWEsQ0FBQyxXQUFXLElBQ2pELHVCQUF1QixHQUFHLHFCQUFxQixDQUFDLGVBQWUsQ0FuQjNDLFFBQVk7UUFxQmxDLHVCQUF1QjtRQUN6QixPQUFPLENBQUMsR0FBRyxFQUFDLFdBQWE7OztRQUtyQixJQUFJLFFBQVEsT0FBTyxJQUNuQixRQUFRLFFBQVEsV0FBVyxJQUMzQixlQUFlLFFBQVEsdUJBQXVCLElBQzlDLGlCQUFpQixHQUFHLGFBQWEsQ0FBQyxPQUFPLElBQ3pDLG1CQUFtQixHQUFHLGVBQWUsQ0FBQyxPQUFPLElBQzdDLHNCQUFzQixHQUFHLG1CQUFtQixFQUM1QyxzQkFBc0IsR0FBSSxJQUFJLEtBQUssSUFBSSxHQUNaLGlCQUFpQixNQUNKLE1BQWlCLENBQXpCLElBQUksR0FBQyxDQUFDLEdBQW9CLE1BQUEsQ0FBbEIsaUJBQWlCLEdBQ3pELHVCQUF1QixHQUFHLGVBQWUsQ0FBQyxXQUFXLElBQ3JELDBCQUEwQixHQUFHLHVCQUF1QixFQUNwRCwwQkFBMEIsR0FBRyxRQUFRLENBQUcsQ0FBRyxBQUFILEVBQUcsQUFBSCxDQUFHO1FBRTVDLDBCQUEwQixLQUFLLDBCQUEwQixJQUFNLHNCQUFzQixLQUFLLHNCQUFzQjtZQUM3RyxpQkFBaUIsR0FBRyxhQUFhLENBQUMsT0FBTyxJQUN6QyxvQkFBbUIsR0FBRyxzQkFBc0IsQ0FBRSxDQUFHLEFBQUgsRUFBRyxBQUFILENBQUc7UUFFdkQsUUFBUSxDQUFDLFlBQVk7UUFFckIsUUFBUSxDQUFDLFNBQVMsQ0FBQyxvQkFBbUIsRUFBRSxpQkFBaUI7Ozs7SUFLM0QsWUFBWSxFQUFaLFlBQVk7SUFDWixhQUFhLEVBQWIsYUFBYSJ9