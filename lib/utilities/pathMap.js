"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.sourceEntryPathFromDragEntryItemPath = sourceEntryPathFromDragEntryItemPath;
exports.targetEntryPathFromMarkerEntryItemPath = targetEntryPathFromMarkerEntryItemPath;
exports.adjustSourceEntryPath = adjustSourceEntryPath;
exports.adjustTargetEntryPath = adjustTargetEntryPath;
var _necessary = require("necessary");
var _constants = require("../constants");
var pathWithoutBottommostNameFromPath = _necessary.pathUtilities.pathWithoutBottommostNameFromPath;
function sourceEntryPathFromDragEntryItemPath(dragEntryItemPath) {
    var dragEntryItemPathWithoutBottommostName = pathWithoutBottommostNameFromPath(dragEntryItemPath), sourceEntryPath = nonNullPathFromName(dragEntryItemPathWithoutBottommostName); ///
    return sourceEntryPath;
}
function targetEntryPathFromMarkerEntryItemPath(markerEntryItemPath) {
    var markerEntryItemPathWithoutBottommostName = pathWithoutBottommostNameFromPath(markerEntryItemPath), targetEntryPath = nonNullPathFromName(markerEntryItemPathWithoutBottommostName); ///
    return targetEntryPath;
}
function adjustSourceEntryPath(sourceEntryPath, name) {
    if (false) {
    ///
    } else if (sourceEntryPath === _constants.EMPTY_STRING) {
        sourceEntryPath = name; ///
    } else {
        sourceEntryPath = "".concat(sourceEntryPath, "/").concat(name);
    }
    return sourceEntryPath;
}
function adjustTargetEntryPath(targetEntryPath, name) {
    if (false) {
    ///
    } else if (targetEntryPath === null) {
        targetEntryPath = null;
    } else if (targetEntryPath === _constants.EMPTY_STRING) {
        targetEntryPath = name; ///
    } else {
        targetEntryPath = "".concat(targetEntryPath, "/").concat(name);
    }
    return targetEntryPath;
}
function nonNullPathFromName(name) {
    var path = name !== null ? name : _constants.EMPTY_STRING;
    return path;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvcGF0aE1hcC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgcGF0aFV0aWxpdGllcyB9IGZyb20gXCJuZWNlc3NhcnlcIjtcblxuaW1wb3J0IHsgRU1QVFlfU1RSSU5HIH0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuXG5jb25zdCB7IHBhdGhXaXRob3V0Qm90dG9tbW9zdE5hbWVGcm9tUGF0aCB9ID0gcGF0aFV0aWxpdGllcztcblxuZXhwb3J0IGZ1bmN0aW9uIHNvdXJjZUVudHJ5UGF0aEZyb21EcmFnRW50cnlJdGVtUGF0aChkcmFnRW50cnlJdGVtUGF0aCkge1xuICBjb25zdCBkcmFnRW50cnlJdGVtUGF0aFdpdGhvdXRCb3R0b21tb3N0TmFtZSA9IHBhdGhXaXRob3V0Qm90dG9tbW9zdE5hbWVGcm9tUGF0aChkcmFnRW50cnlJdGVtUGF0aCksXG4gICAgICAgIHNvdXJjZUVudHJ5UGF0aCA9IG5vbk51bGxQYXRoRnJvbU5hbWUoZHJhZ0VudHJ5SXRlbVBhdGhXaXRob3V0Qm90dG9tbW9zdE5hbWUpOyAvLy9cblxuICByZXR1cm4gc291cmNlRW50cnlQYXRoO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGFyZ2V0RW50cnlQYXRoRnJvbU1hcmtlckVudHJ5SXRlbVBhdGgobWFya2VyRW50cnlJdGVtUGF0aCkge1xuICBjb25zdCBtYXJrZXJFbnRyeUl0ZW1QYXRoV2l0aG91dEJvdHRvbW1vc3ROYW1lID0gcGF0aFdpdGhvdXRCb3R0b21tb3N0TmFtZUZyb21QYXRoKG1hcmtlckVudHJ5SXRlbVBhdGgpLFxuICAgICAgICB0YXJnZXRFbnRyeVBhdGggPSBub25OdWxsUGF0aEZyb21OYW1lKG1hcmtlckVudHJ5SXRlbVBhdGhXaXRob3V0Qm90dG9tbW9zdE5hbWUpOyAvLy9cblxuICByZXR1cm4gdGFyZ2V0RW50cnlQYXRoO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRqdXN0U291cmNlRW50cnlQYXRoKHNvdXJjZUVudHJ5UGF0aCwgbmFtZSkge1xuICBpZiAoZmFsc2UpIHtcbiAgICAvLy9cbiAgfSBlbHNlIGlmIChzb3VyY2VFbnRyeVBhdGggPT09IEVNUFRZX1NUUklORykge1xuICAgIHNvdXJjZUVudHJ5UGF0aCA9IG5hbWU7ICAvLy9cbiAgfSBlbHNlIHtcbiAgICBzb3VyY2VFbnRyeVBhdGggPSBgJHtzb3VyY2VFbnRyeVBhdGh9LyR7bmFtZX1gO1xuICB9XG5cbiAgcmV0dXJuIHNvdXJjZUVudHJ5UGF0aDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkanVzdFRhcmdldEVudHJ5UGF0aCh0YXJnZXRFbnRyeVBhdGgsIG5hbWUpIHtcbiAgaWYgKGZhbHNlKSB7XG4gICAgLy8vXG4gIH0gZWxzZSBpZiAodGFyZ2V0RW50cnlQYXRoID09PSBudWxsKSB7XG4gICAgdGFyZ2V0RW50cnlQYXRoID0gbnVsbDtcbiAgfSBlbHNlIGlmICh0YXJnZXRFbnRyeVBhdGggPT09IEVNUFRZX1NUUklORykge1xuICAgIHRhcmdldEVudHJ5UGF0aCA9IG5hbWU7ICAvLy9cbiAgfSBlbHNlIHtcbiAgICB0YXJnZXRFbnRyeVBhdGggPSBgJHt0YXJnZXRFbnRyeVBhdGh9LyR7bmFtZX1gO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldEVudHJ5UGF0aDtcbn1cblxuZnVuY3Rpb24gbm9uTnVsbFBhdGhGcm9tTmFtZShuYW1lKSB7XG4gIGNvbnN0IHBhdGggPSAobmFtZSAhPT0gbnVsbCkgP1xuICAgICAgICAgICAgICAgICAgbmFtZSA6ICAvLy9cbiAgICAgICAgICAgICAgICAgICAgRU1QVFlfU1RSSU5HO1xuXG4gIHJldHVybiBwYXRoO1xufVxuIl0sIm5hbWVzIjpbInNvdXJjZUVudHJ5UGF0aEZyb21EcmFnRW50cnlJdGVtUGF0aCIsInRhcmdldEVudHJ5UGF0aEZyb21NYXJrZXJFbnRyeUl0ZW1QYXRoIiwiYWRqdXN0U291cmNlRW50cnlQYXRoIiwiYWRqdXN0VGFyZ2V0RW50cnlQYXRoIiwicGF0aFdpdGhvdXRCb3R0b21tb3N0TmFtZUZyb21QYXRoIiwiZHJhZ0VudHJ5SXRlbVBhdGgiLCJkcmFnRW50cnlJdGVtUGF0aFdpdGhvdXRCb3R0b21tb3N0TmFtZSIsInNvdXJjZUVudHJ5UGF0aCIsIm5vbk51bGxQYXRoRnJvbU5hbWUiLCJtYXJrZXJFbnRyeUl0ZW1QYXRoIiwibWFya2VyRW50cnlJdGVtUGF0aFdpdGhvdXRCb3R0b21tb3N0TmFtZSIsInRhcmdldEVudHJ5UGF0aCIsIm5hbWUiLCJwYXRoIl0sIm1hcHBpbmdzIjoiQUFBQSxDQUFZOzs7O1FBUUlBLG9DQUFvQyxHQUFwQ0Esb0NBQW9DO1FBT3BDQyxzQ0FBc0MsR0FBdENBLHNDQUFzQztRQU90Q0MscUJBQXFCLEdBQXJCQSxxQkFBcUI7UUFZckJDLHFCQUFxQixHQUFyQkEscUJBQXFCO0FBaENQLEdBQVcsQ0FBWCxVQUFXO0FBRVosR0FBYyxDQUFkLFVBQWM7QUFFM0MsR0FBSyxDQUFHQyxpQ0FBaUMsR0FKWCxVQUFXLGVBSWpDQSxpQ0FBaUM7U0FFekJKLG9DQUFvQyxDQUFDSyxpQkFBaUIsRUFBRSxDQUFDO0lBQ3ZFLEdBQUssQ0FBQ0Msc0NBQXNDLEdBQUdGLGlDQUFpQyxDQUFDQyxpQkFBaUIsR0FDNUZFLGVBQWUsR0FBR0MsbUJBQW1CLENBQUNGLHNDQUFzQyxFQUFHLENBQUcsQUFBSCxFQUFHLEFBQUgsQ0FBRztJQUV4RixNQUFNLENBQUNDLGVBQWU7QUFDeEIsQ0FBQztTQUVlTixzQ0FBc0MsQ0FBQ1EsbUJBQW1CLEVBQUUsQ0FBQztJQUMzRSxHQUFLLENBQUNDLHdDQUF3QyxHQUFHTixpQ0FBaUMsQ0FBQ0ssbUJBQW1CLEdBQ2hHRSxlQUFlLEdBQUdILG1CQUFtQixDQUFDRSx3Q0FBd0MsRUFBRyxDQUFHLEFBQUgsRUFBRyxBQUFILENBQUc7SUFFMUYsTUFBTSxDQUFDQyxlQUFlO0FBQ3hCLENBQUM7U0FFZVQscUJBQXFCLENBQUNLLGVBQWUsRUFBRUssSUFBSSxFQUFFLENBQUM7SUFDNUQsRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDO0lBQ1YsRUFBRyxBQUFILENBQUc7SUFDTCxDQUFDLE1BQU0sRUFBRSxFQUFFTCxlQUFlLEtBckJDLFVBQWMsZUFxQkksQ0FBQztRQUM1Q0EsZUFBZSxHQUFHSyxJQUFJLENBQUcsQ0FBRyxBQUFILEVBQUcsQUFBSCxDQUFHO0lBQzlCLENBQUMsTUFBTSxDQUFDO1FBQ05MLGVBQWUsR0FBSSxDQUFBLEVBQXFCSyxNQUFJLENBQXZCTCxlQUFlLEVBQUMsQ0FBQyxJQUFPLE1BQUEsQ0FBTEssSUFBSTtJQUM5QyxDQUFDO0lBRUQsTUFBTSxDQUFDTCxlQUFlO0FBQ3hCLENBQUM7U0FFZUoscUJBQXFCLENBQUNRLGVBQWUsRUFBRUMsSUFBSSxFQUFFLENBQUM7SUFDNUQsRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDO0lBQ1YsRUFBRyxBQUFILENBQUc7SUFDTCxDQUFDLE1BQU0sRUFBRSxFQUFFRCxlQUFlLEtBQUssSUFBSSxFQUFFLENBQUM7UUFDcENBLGVBQWUsR0FBRyxJQUFJO0lBQ3hCLENBQUMsTUFBTSxFQUFFLEVBQUVBLGVBQWUsS0FuQ0MsVUFBYyxlQW1DSSxDQUFDO1FBQzVDQSxlQUFlLEdBQUdDLElBQUksQ0FBRyxDQUFHLEFBQUgsRUFBRyxBQUFILENBQUc7SUFDOUIsQ0FBQyxNQUFNLENBQUM7UUFDTkQsZUFBZSxHQUFJLENBQUEsRUFBcUJDLE1BQUksQ0FBdkJELGVBQWUsRUFBQyxDQUFDLElBQU8sTUFBQSxDQUFMQyxJQUFJO0lBQzlDLENBQUM7SUFFRCxNQUFNLENBQUNELGVBQWU7QUFDeEIsQ0FBQztTQUVRSCxtQkFBbUIsQ0FBQ0ksSUFBSSxFQUFFLENBQUM7SUFDbEMsR0FBSyxDQUFDQyxJQUFJLEdBQUlELElBQUksS0FBSyxJQUFJLEdBQ1hBLElBQUksR0E5Q08sVUFBYztJQWlEekMsTUFBTSxDQUFDQyxJQUFJO0FBQ2IsQ0FBQyJ9