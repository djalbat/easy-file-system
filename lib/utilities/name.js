"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.extensionFromName = extensionFromName;
exports.nameWithoutExtensionFromName = nameWithoutExtensionFromName;
exports.nameIsBeforeEntryDivName = nameIsBeforeEntryDivName;
var _necessary = require("necessary");
var second = _necessary.arrayUtilities.second;
function extensionFromName(name) {
    var extension = null;
    var matches = name.match(/^.*\.([^.]+)$/);
    if (matches !== null) {
        var secondMatch = second(matches);
        extension = secondMatch; ///
    }
    return extension;
}
function nameWithoutExtensionFromName(name) {
    var nameWithoutExtension = null;
    var matches = name.match(/^(.+)\.[^.]+$/);
    if (matches !== null) {
        var secondMatch = second(matches);
        nameWithoutExtension = secondMatch; ///
    }
    return nameWithoutExtension;
}
function nameIsBeforeEntryDivName(name, entryDivName) {
    var before = name.localeCompare(entryDivName) < 0;
    var nameExtension = extensionFromName(name), entryDivNameExtension = extensionFromName(entryDivName), nameWithoutExtension = nameWithoutExtensionFromName(name), entryDivNameWithoutExtension = nameWithoutExtensionFromName(entryDivName), nameExtensionPresent = nameExtension !== null, entryDivNameExtensionPresent = entryDivNameExtension !== null, nameWithoutExtensionMissing = nameWithoutExtension === null, entryDivNameWithoutExtensionMissing = entryDivNameWithoutExtension === null, extensionsBothPresent = nameExtensionPresent && entryDivNameExtensionPresent, namesWithoutExtensionsBothMissing = nameWithoutExtensionMissing && entryDivNameWithoutExtensionMissing;
    if (namesWithoutExtensionsBothMissing) {
    ///
    } else if (nameWithoutExtensionMissing) {
        before = true;
    } else if (entryDivNameWithoutExtensionMissing) {
        before = false;
    } else {
        if (extensionsBothPresent) {
            var extensionsDiffer = nameExtension !== entryDivNameExtension;
            if (extensionsDiffer) {
                before = nameExtension.localeCompare(entryDivNameExtension) < 0;
            }
        } else if (nameExtensionPresent) {
            before = false;
        } else if (entryDivNameExtensionPresent) {
            before = true;
        }
    }
    return before;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvbmFtZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgYXJyYXlVdGlsaXRpZXMgfSBmcm9tIFwibmVjZXNzYXJ5XCI7XG5cbmNvbnN0IHsgc2Vjb25kIH0gPSBhcnJheVV0aWxpdGllcztcblxuZXhwb3J0IGZ1bmN0aW9uIGV4dGVuc2lvbkZyb21OYW1lKG5hbWUpIHtcblx0bGV0IGV4dGVuc2lvbiA9IG51bGw7XG5cblx0Y29uc3QgbWF0Y2hlcyA9IG5hbWUubWF0Y2goL14uKlxcLihbXi5dKykkLyk7XG5cblx0aWYgKG1hdGNoZXMgIT09IG51bGwpIHtcblx0XHRjb25zdCBzZWNvbmRNYXRjaCA9IHNlY29uZChtYXRjaGVzKTtcblxuXHRcdGV4dGVuc2lvbiA9IHNlY29uZE1hdGNoOyAgLy8vXG5cdH1cblxuXHRyZXR1cm4gZXh0ZW5zaW9uO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbmFtZVdpdGhvdXRFeHRlbnNpb25Gcm9tTmFtZShuYW1lKSB7XG5cdGxldCBuYW1lV2l0aG91dEV4dGVuc2lvbiA9IG51bGw7XG5cblx0Y29uc3QgbWF0Y2hlcyA9IG5hbWUubWF0Y2goL14oLispXFwuW14uXSskLyk7XG5cblx0aWYgKG1hdGNoZXMgIT09IG51bGwpIHtcblx0XHRjb25zdCBzZWNvbmRNYXRjaCA9IHNlY29uZChtYXRjaGVzKTtcblxuXHRcdG5hbWVXaXRob3V0RXh0ZW5zaW9uID0gc2Vjb25kTWF0Y2g7ICAvLy9cblx0fVxuXG5cdHJldHVybiBuYW1lV2l0aG91dEV4dGVuc2lvbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5hbWVJc0JlZm9yZUVudHJ5RGl2TmFtZShuYW1lLCBlbnRyeURpdk5hbWUpIHtcblx0bGV0IGJlZm9yZSA9IChuYW1lLmxvY2FsZUNvbXBhcmUoZW50cnlEaXZOYW1lKSA8IDApO1xuXG5cdGNvbnN0IG5hbWVFeHRlbnNpb24gPSBleHRlbnNpb25Gcm9tTmFtZShuYW1lKSxcblx0XHRcdFx0ZW50cnlEaXZOYW1lRXh0ZW5zaW9uID0gZXh0ZW5zaW9uRnJvbU5hbWUoZW50cnlEaXZOYW1lKSxcblx0XHRcdFx0bmFtZVdpdGhvdXRFeHRlbnNpb24gPSBuYW1lV2l0aG91dEV4dGVuc2lvbkZyb21OYW1lKG5hbWUpLFxuXHRcdFx0XHRlbnRyeURpdk5hbWVXaXRob3V0RXh0ZW5zaW9uID0gbmFtZVdpdGhvdXRFeHRlbnNpb25Gcm9tTmFtZShlbnRyeURpdk5hbWUpLFxuXHRcdFx0XHRuYW1lRXh0ZW5zaW9uUHJlc2VudCA9IChuYW1lRXh0ZW5zaW9uICE9PSBudWxsKSxcblx0XHRcdFx0ZW50cnlEaXZOYW1lRXh0ZW5zaW9uUHJlc2VudCA9IChlbnRyeURpdk5hbWVFeHRlbnNpb24gIT09IG51bGwpLFxuXHRcdFx0XHRuYW1lV2l0aG91dEV4dGVuc2lvbk1pc3NpbmcgPSAobmFtZVdpdGhvdXRFeHRlbnNpb24gPT09IG51bGwpLFxuXHRcdFx0XHRlbnRyeURpdk5hbWVXaXRob3V0RXh0ZW5zaW9uTWlzc2luZyA9IChlbnRyeURpdk5hbWVXaXRob3V0RXh0ZW5zaW9uID09PSBudWxsKSxcblx0XHRcdFx0ZXh0ZW5zaW9uc0JvdGhQcmVzZW50ID0gKG5hbWVFeHRlbnNpb25QcmVzZW50ICYmIGVudHJ5RGl2TmFtZUV4dGVuc2lvblByZXNlbnQpLFxuXHRcdFx0XHRuYW1lc1dpdGhvdXRFeHRlbnNpb25zQm90aE1pc3NpbmcgPSAobmFtZVdpdGhvdXRFeHRlbnNpb25NaXNzaW5nICYmIGVudHJ5RGl2TmFtZVdpdGhvdXRFeHRlbnNpb25NaXNzaW5nKTtcblxuXHRpZiAobmFtZXNXaXRob3V0RXh0ZW5zaW9uc0JvdGhNaXNzaW5nKSB7XG5cdFx0Ly8vXG5cdH0gZWxzZSBpZiAobmFtZVdpdGhvdXRFeHRlbnNpb25NaXNzaW5nKSB7XG5cdFx0YmVmb3JlID0gdHJ1ZTtcblx0fSBlbHNlIGlmIChlbnRyeURpdk5hbWVXaXRob3V0RXh0ZW5zaW9uTWlzc2luZykge1xuXHRcdGJlZm9yZSA9IGZhbHNlO1xuXHR9IGVsc2Uge1xuXHRcdGlmIChleHRlbnNpb25zQm90aFByZXNlbnQpIHtcblx0XHRcdGNvbnN0IGV4dGVuc2lvbnNEaWZmZXIgPSAobmFtZUV4dGVuc2lvbiAhPT0gZW50cnlEaXZOYW1lRXh0ZW5zaW9uKTtcblxuXHRcdFx0aWYgKGV4dGVuc2lvbnNEaWZmZXIpIHtcblx0XHRcdFx0YmVmb3JlID0gKG5hbWVFeHRlbnNpb24ubG9jYWxlQ29tcGFyZShlbnRyeURpdk5hbWVFeHRlbnNpb24pIDwgMCk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmIChuYW1lRXh0ZW5zaW9uUHJlc2VudCkge1xuXHRcdFx0YmVmb3JlID0gZmFsc2U7XG5cdFx0fSBlbHNlIGlmIChlbnRyeURpdk5hbWVFeHRlbnNpb25QcmVzZW50KSB7XG5cdFx0XHRiZWZvcmUgPSB0cnVlO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBiZWZvcmU7XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkNBQUEsVUFBWTs7OztRQU1JLGlCQUFpQixHQUFqQixpQkFBaUI7UUFjakIsNEJBQTRCLEdBQTVCLDRCQUE0QjtRQWM1Qix3QkFBd0IsR0FBeEIsd0JBQXdCO0lBaENULFVBQVc7SUFFbEMsTUFBTSxHQUZpQixVQUFXLGdCQUVsQyxNQUFNO1NBRUUsaUJBQWlCLENBQUMsSUFBSTtRQUNqQyxTQUFTLEdBQUcsSUFBSTtRQUVkLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSztRQUV0QixPQUFPLEtBQUssSUFBSTtZQUNiLFdBQVcsR0FBRyxNQUFNLENBQUMsT0FBTztRQUVsQyxTQUFTLEdBQUcsV0FBVyxDQUFHLENBQUcsQUFBSCxFQUFHLEFBQUgsQ0FBRzs7V0FHdkIsU0FBUzs7U0FHRCw0QkFBNEIsQ0FBQyxJQUFJO1FBQzVDLG9CQUFvQixHQUFHLElBQUk7UUFFekIsT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLO1FBRXRCLE9BQU8sS0FBSyxJQUFJO1lBQ2IsV0FBVyxHQUFHLE1BQU0sQ0FBQyxPQUFPO1FBRWxDLG9CQUFvQixHQUFHLFdBQVcsQ0FBRyxDQUFHLEFBQUgsRUFBRyxBQUFILENBQUc7O1dBR2xDLG9CQUFvQjs7U0FHWix3QkFBd0IsQ0FBQyxJQUFJLEVBQUUsWUFBWTtRQUN0RCxNQUFNLEdBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLElBQUksQ0FBQztRQUU1QyxhQUFhLEdBQUcsaUJBQWlCLENBQUMsSUFBSSxHQUN6QyxxQkFBcUIsR0FBRyxpQkFBaUIsQ0FBQyxZQUFZLEdBQ3RELG9CQUFvQixHQUFHLDRCQUE0QixDQUFDLElBQUksR0FDeEQsNEJBQTRCLEdBQUcsNEJBQTRCLENBQUMsWUFBWSxHQUN4RSxvQkFBb0IsR0FBSSxhQUFhLEtBQUssSUFBSSxFQUM5Qyw0QkFBNEIsR0FBSSxxQkFBcUIsS0FBSyxJQUFJLEVBQzlELDJCQUEyQixHQUFJLG9CQUFvQixLQUFLLElBQUksRUFDNUQsbUNBQW1DLEdBQUksNEJBQTRCLEtBQUssSUFBSSxFQUM1RSxxQkFBcUIsR0FBSSxvQkFBb0IsSUFBSSw0QkFBNEIsRUFDN0UsaUNBQWlDLEdBQUksMkJBQTJCLElBQUksbUNBQW1DO1FBRXRHLGlDQUFpQztJQUNwQyxFQUFHLEFBQUgsQ0FBRztlQUNPLDJCQUEyQjtRQUNyQyxNQUFNLEdBQUcsSUFBSTtlQUNILG1DQUFtQztRQUM3QyxNQUFNLEdBQUcsS0FBSzs7WUFFVixxQkFBcUI7Z0JBQ2xCLGdCQUFnQixHQUFJLGFBQWEsS0FBSyxxQkFBcUI7Z0JBRTdELGdCQUFnQjtnQkFDbkIsTUFBTSxHQUFJLGFBQWEsQ0FBQyxhQUFhLENBQUMscUJBQXFCLElBQUksQ0FBQzs7bUJBRXZELG9CQUFvQjtZQUM5QixNQUFNLEdBQUcsS0FBSzttQkFDSiw0QkFBNEI7WUFDdEMsTUFBTSxHQUFHLElBQUk7OztXQUlSLE1BQU0ifQ==