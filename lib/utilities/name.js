"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.extensionFromName = extensionFromName;
exports.nameIsBeforeEntryItemName = nameIsBeforeEntryItemName;
exports.nameWithoutExtensionFromName = nameWithoutExtensionFromName;
var _necessary = require("necessary");
var second = _necessary.arrayUtilities.second;
function extensionFromName(name) {
    var extension = null;
    var matches = name.match(/^.*\.([^.]+)$/);
    if (matches !== null) {
        var secondMatch = second(matches);
        extension = secondMatch; ///
    }
    return extension;
}
function nameIsBeforeEntryItemName(name, entryItemName) {
    var before = name.localeCompare(entryItemName) < 0;
    var nameExtension = extensionFromName(name), entryItemNameExtension = extensionFromName(entryItemName), nameWithoutExtension = nameWithoutExtensionFromName(name), entryItemNameWithoutExtension = nameWithoutExtensionFromName(entryItemName), nameExtensionPresent = nameExtension !== null, entryItemNameExtensionPresent = entryItemNameExtension !== null, nameWithoutExtensionMissing = nameWithoutExtension === null, entryItemNameWithoutExtensionMissing = entryItemNameWithoutExtension === null, extensionsBothPresent = nameExtensionPresent && entryItemNameExtensionPresent, namesWithoutExtensionsBothMissing = nameWithoutExtensionMissing && entryItemNameWithoutExtensionMissing;
    if (namesWithoutExtensionsBothMissing) {
    ///
    } else if (nameWithoutExtensionMissing) {
        before = true;
    } else if (entryItemNameWithoutExtensionMissing) {
        before = false;
    } else {
        if (extensionsBothPresent) {
            var extensionsDiffer = nameExtension !== entryItemNameExtension;
            if (extensionsDiffer) {
                before = nameExtension.localeCompare(entryItemNameExtension) < 0;
            }
        } else if (nameExtensionPresent) {
            before = false;
        } else if (entryItemNameExtensionPresent) {
            before = true;
        }
    }
    return before;
}
function nameWithoutExtensionFromName(name) {
    var nameWithoutExtension = null;
    var matches = name.match(/^(.+)\.[^.]+$/);
    if (matches !== null) {
        var secondMatch = second(matches);
        nameWithoutExtension = secondMatch; ///
    }
    return nameWithoutExtension;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvbmFtZS5qcyJdLCJuYW1lcyI6WyJhcnJheVV0aWxpdGllcyIsInNlY29uZCIsImV4dGVuc2lvbkZyb21OYW1lIiwibmFtZSIsImV4dGVuc2lvbiIsIm1hdGNoZXMiLCJtYXRjaCIsInNlY29uZE1hdGNoIiwibmFtZUlzQmVmb3JlRW50cnlJdGVtTmFtZSIsImVudHJ5SXRlbU5hbWUiLCJiZWZvcmUiLCJsb2NhbGVDb21wYXJlIiwibmFtZUV4dGVuc2lvbiIsImVudHJ5SXRlbU5hbWVFeHRlbnNpb24iLCJuYW1lV2l0aG91dEV4dGVuc2lvbiIsIm5hbWVXaXRob3V0RXh0ZW5zaW9uRnJvbU5hbWUiLCJlbnRyeUl0ZW1OYW1lV2l0aG91dEV4dGVuc2lvbiIsIm5hbWVFeHRlbnNpb25QcmVzZW50IiwiZW50cnlJdGVtTmFtZUV4dGVuc2lvblByZXNlbnQiLCJuYW1lV2l0aG91dEV4dGVuc2lvbk1pc3NpbmciLCJlbnRyeUl0ZW1OYW1lV2l0aG91dEV4dGVuc2lvbk1pc3NpbmciLCJleHRlbnNpb25zQm90aFByZXNlbnQiLCJuYW1lc1dpdGhvdXRFeHRlbnNpb25zQm90aE1pc3NpbmciLCJleHRlbnNpb25zRGlmZmVyIl0sIm1hcHBpbmdzIjoiQUFBQSxDQUFZOzs7O1FBTUksaUJBQWlCLEdBQWpCLGlCQUFpQjtRQWNqQix5QkFBeUIsR0FBekIseUJBQXlCO1FBcUN6Qiw0QkFBNEIsR0FBNUIsNEJBQTRCO0FBdkRiLEdBQVcsQ0FBWCxVQUFXO0FBRTFDLEdBQUssQ0FBRyxNQUFNLEdBRmlCLFVBQVcsZ0JBRWxDLE1BQU07U0FFRSxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN4QyxHQUFHLENBQUMsU0FBUyxHQUFHLElBQUk7SUFFcEIsR0FBSyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSztJQUUxQixFQUFFLEVBQUUsT0FBTyxLQUFLLElBQUksRUFBRSxDQUFDO1FBQ3RCLEdBQUssQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDLE9BQU87UUFFbEMsU0FBUyxHQUFHLFdBQVcsQ0FBRyxDQUFHLEFBQUgsRUFBRyxBQUFILENBQUc7SUFDOUIsQ0FBQztJQUVELE1BQU0sQ0FBQyxTQUFTO0FBQ2pCLENBQUM7U0FFZSx5QkFBeUIsQ0FBQyxJQUFJLEVBQUUsYUFBYSxFQUFFLENBQUM7SUFDL0QsR0FBRyxDQUFDLE1BQU0sR0FBSSxJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsSUFBSSxDQUFDO0lBRW5ELEdBQUssQ0FBQyxhQUFhLEdBQUcsaUJBQWlCLENBQUMsSUFBSSxHQUN6QyxzQkFBc0IsR0FBRyxpQkFBaUIsQ0FBQyxhQUFhLEdBQ3hELG9CQUFvQixHQUFHLDRCQUE0QixDQUFDLElBQUksR0FDeEQsNkJBQTZCLEdBQUcsNEJBQTRCLENBQUMsYUFBYSxHQUMxRSxvQkFBb0IsR0FBSSxhQUFhLEtBQUssSUFBSSxFQUM5Qyw2QkFBNkIsR0FBSSxzQkFBc0IsS0FBSyxJQUFJLEVBQ2hFLDJCQUEyQixHQUFJLG9CQUFvQixLQUFLLElBQUksRUFDNUQsb0NBQW9DLEdBQUksNkJBQTZCLEtBQUssSUFBSSxFQUM5RSxxQkFBcUIsR0FBSSxvQkFBb0IsSUFBSSw2QkFBNkIsRUFDOUUsaUNBQWlDLEdBQUksMkJBQTJCLElBQUksb0NBQW9DO0lBRTNHLEVBQUUsRUFBRSxpQ0FBaUMsRUFBRSxDQUFDO0lBQ3ZDLEVBQUcsQUFBSCxDQUFHO0lBQ0osQ0FBQyxNQUFNLEVBQUUsRUFBRSwyQkFBMkIsRUFBRSxDQUFDO1FBQ3hDLE1BQU0sR0FBRyxJQUFJO0lBQ2QsQ0FBQyxNQUFNLEVBQUUsRUFBRSxvQ0FBb0MsRUFBRSxDQUFDO1FBQ2pELE1BQU0sR0FBRyxLQUFLO0lBQ2YsQ0FBQyxNQUFNLENBQUM7UUFDUCxFQUFFLEVBQUUscUJBQXFCLEVBQUUsQ0FBQztZQUMzQixHQUFLLENBQUMsZ0JBQWdCLEdBQUksYUFBYSxLQUFLLHNCQUFzQjtZQUVsRSxFQUFFLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQztnQkFDdEIsTUFBTSxHQUFJLGFBQWEsQ0FBQyxhQUFhLENBQUMsc0JBQXNCLElBQUksQ0FBQztZQUNsRSxDQUFDO1FBQ0YsQ0FBQyxNQUFNLEVBQUUsRUFBRSxvQkFBb0IsRUFBRSxDQUFDO1lBQ2pDLE1BQU0sR0FBRyxLQUFLO1FBQ2YsQ0FBQyxNQUFNLEVBQUUsRUFBRSw2QkFBNkIsRUFBRSxDQUFDO1lBQzFDLE1BQU0sR0FBRyxJQUFJO1FBQ2QsQ0FBQztJQUNGLENBQUM7SUFFRCxNQUFNLENBQUMsTUFBTTtBQUNkLENBQUM7U0FFZSw0QkFBNEIsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNuRCxHQUFHLENBQUMsb0JBQW9CLEdBQUcsSUFBSTtJQUUvQixHQUFLLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLO0lBRTFCLEVBQUUsRUFBRSxPQUFPLEtBQUssSUFBSSxFQUFFLENBQUM7UUFDdEIsR0FBSyxDQUFDLFdBQVcsR0FBRyxNQUFNLENBQUMsT0FBTztRQUVsQyxvQkFBb0IsR0FBRyxXQUFXLENBQUcsQ0FBRyxBQUFILEVBQUcsQUFBSCxDQUFHO0lBQ3pDLENBQUM7SUFFRCxNQUFNLENBQUMsb0JBQW9CO0FBQzVCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgYXJyYXlVdGlsaXRpZXMgfSBmcm9tIFwibmVjZXNzYXJ5XCI7XG5cbmNvbnN0IHsgc2Vjb25kIH0gPSBhcnJheVV0aWxpdGllcztcblxuZXhwb3J0IGZ1bmN0aW9uIGV4dGVuc2lvbkZyb21OYW1lKG5hbWUpIHtcblx0bGV0IGV4dGVuc2lvbiA9IG51bGw7XG5cblx0Y29uc3QgbWF0Y2hlcyA9IG5hbWUubWF0Y2goL14uKlxcLihbXi5dKykkLyk7XG5cblx0aWYgKG1hdGNoZXMgIT09IG51bGwpIHtcblx0XHRjb25zdCBzZWNvbmRNYXRjaCA9IHNlY29uZChtYXRjaGVzKTtcblxuXHRcdGV4dGVuc2lvbiA9IHNlY29uZE1hdGNoOyAgLy8vXG5cdH1cblxuXHRyZXR1cm4gZXh0ZW5zaW9uO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbmFtZUlzQmVmb3JlRW50cnlJdGVtTmFtZShuYW1lLCBlbnRyeUl0ZW1OYW1lKSB7XG5cdGxldCBiZWZvcmUgPSAobmFtZS5sb2NhbGVDb21wYXJlKGVudHJ5SXRlbU5hbWUpIDwgMCk7XG5cblx0Y29uc3QgbmFtZUV4dGVuc2lvbiA9IGV4dGVuc2lvbkZyb21OYW1lKG5hbWUpLFxuXHRcdFx0XHRlbnRyeUl0ZW1OYW1lRXh0ZW5zaW9uID0gZXh0ZW5zaW9uRnJvbU5hbWUoZW50cnlJdGVtTmFtZSksXG5cdFx0XHRcdG5hbWVXaXRob3V0RXh0ZW5zaW9uID0gbmFtZVdpdGhvdXRFeHRlbnNpb25Gcm9tTmFtZShuYW1lKSxcblx0XHRcdFx0ZW50cnlJdGVtTmFtZVdpdGhvdXRFeHRlbnNpb24gPSBuYW1lV2l0aG91dEV4dGVuc2lvbkZyb21OYW1lKGVudHJ5SXRlbU5hbWUpLFxuXHRcdFx0XHRuYW1lRXh0ZW5zaW9uUHJlc2VudCA9IChuYW1lRXh0ZW5zaW9uICE9PSBudWxsKSxcblx0XHRcdFx0ZW50cnlJdGVtTmFtZUV4dGVuc2lvblByZXNlbnQgPSAoZW50cnlJdGVtTmFtZUV4dGVuc2lvbiAhPT0gbnVsbCksXG5cdFx0XHRcdG5hbWVXaXRob3V0RXh0ZW5zaW9uTWlzc2luZyA9IChuYW1lV2l0aG91dEV4dGVuc2lvbiA9PT0gbnVsbCksXG5cdFx0XHRcdGVudHJ5SXRlbU5hbWVXaXRob3V0RXh0ZW5zaW9uTWlzc2luZyA9IChlbnRyeUl0ZW1OYW1lV2l0aG91dEV4dGVuc2lvbiA9PT0gbnVsbCksXG5cdFx0XHRcdGV4dGVuc2lvbnNCb3RoUHJlc2VudCA9IChuYW1lRXh0ZW5zaW9uUHJlc2VudCAmJiBlbnRyeUl0ZW1OYW1lRXh0ZW5zaW9uUHJlc2VudCksXG5cdFx0XHRcdG5hbWVzV2l0aG91dEV4dGVuc2lvbnNCb3RoTWlzc2luZyA9IChuYW1lV2l0aG91dEV4dGVuc2lvbk1pc3NpbmcgJiYgZW50cnlJdGVtTmFtZVdpdGhvdXRFeHRlbnNpb25NaXNzaW5nKTtcblxuXHRpZiAobmFtZXNXaXRob3V0RXh0ZW5zaW9uc0JvdGhNaXNzaW5nKSB7XG5cdFx0Ly8vXG5cdH0gZWxzZSBpZiAobmFtZVdpdGhvdXRFeHRlbnNpb25NaXNzaW5nKSB7XG5cdFx0YmVmb3JlID0gdHJ1ZTtcblx0fSBlbHNlIGlmIChlbnRyeUl0ZW1OYW1lV2l0aG91dEV4dGVuc2lvbk1pc3NpbmcpIHtcblx0XHRiZWZvcmUgPSBmYWxzZTtcblx0fSBlbHNlIHtcblx0XHRpZiAoZXh0ZW5zaW9uc0JvdGhQcmVzZW50KSB7XG5cdFx0XHRjb25zdCBleHRlbnNpb25zRGlmZmVyID0gKG5hbWVFeHRlbnNpb24gIT09IGVudHJ5SXRlbU5hbWVFeHRlbnNpb24pO1xuXG5cdFx0XHRpZiAoZXh0ZW5zaW9uc0RpZmZlcikge1xuXHRcdFx0XHRiZWZvcmUgPSAobmFtZUV4dGVuc2lvbi5sb2NhbGVDb21wYXJlKGVudHJ5SXRlbU5hbWVFeHRlbnNpb24pIDwgMCk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmIChuYW1lRXh0ZW5zaW9uUHJlc2VudCkge1xuXHRcdFx0YmVmb3JlID0gZmFsc2U7XG5cdFx0fSBlbHNlIGlmIChlbnRyeUl0ZW1OYW1lRXh0ZW5zaW9uUHJlc2VudCkge1xuXHRcdFx0YmVmb3JlID0gdHJ1ZTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gYmVmb3JlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbmFtZVdpdGhvdXRFeHRlbnNpb25Gcm9tTmFtZShuYW1lKSB7XG5cdGxldCBuYW1lV2l0aG91dEV4dGVuc2lvbiA9IG51bGw7XG5cblx0Y29uc3QgbWF0Y2hlcyA9IG5hbWUubWF0Y2goL14oLispXFwuW14uXSskLyk7XG5cblx0aWYgKG1hdGNoZXMgIT09IG51bGwpIHtcblx0XHRjb25zdCBzZWNvbmRNYXRjaCA9IHNlY29uZChtYXRjaGVzKTtcblxuXHRcdG5hbWVXaXRob3V0RXh0ZW5zaW9uID0gc2Vjb25kTWF0Y2g7ICAvLy9cblx0fVxuXG5cdHJldHVybiBuYW1lV2l0aG91dEV4dGVuc2lvbjtcbn1cbiJdfQ==