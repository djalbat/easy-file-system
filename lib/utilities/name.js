"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.extensionFromName = extensionFromName;
exports.nameWithoutExtensionFromName = nameWithoutExtensionFromName;
exports.nameIsBeforeEntryItemName = nameIsBeforeEntryItemName;
var _necessary = require("necessary");
var second = _necessary.arrayUtilities.second;
function extensionFromName(name) {
    var extension = null;
    var matches = name.match(/^.*\.([^.]+)$/);
    if (matches !== null) {
        var secondMatch = second(matches);
        extension = secondMatch; ///
    }
    return extension;
}
function nameWithoutExtensionFromName(name) {
    var nameWithoutExtension = null;
    var matches = name.match(/^(.+)\.[^.]+$/);
    if (matches !== null) {
        var secondMatch = second(matches);
        nameWithoutExtension = secondMatch; ///
    }
    return nameWithoutExtension;
}
function nameIsBeforeEntryItemName(name, entryItemName) {
    var before = name.localeCompare(entryItemName) < 0;
    var nameExtension = extensionFromName(name), entryItemNameExtension = extensionFromName(entryItemName), nameWithoutExtension = nameWithoutExtensionFromName(name), entryItemNameWithoutExtension = nameWithoutExtensionFromName(entryItemName), nameExtensionPresent = nameExtension !== null, entryItemNameExtensionPresent = entryItemNameExtension !== null, nameWithoutExtensionMissing = nameWithoutExtension === null, entryItemNameWithoutExtensionMissing = entryItemNameWithoutExtension === null, extensionsBothPresent = nameExtensionPresent && entryItemNameExtensionPresent, namesWithoutExtensionsBothMissing = nameWithoutExtensionMissing && entryItemNameWithoutExtensionMissing;
    if (namesWithoutExtensionsBothMissing) {
    ///
    } else if (nameWithoutExtensionMissing) {
        before = true;
    } else if (entryItemNameWithoutExtensionMissing) {
        before = false;
    } else {
        if (extensionsBothPresent) {
            var extensionsDiffer = nameExtension !== entryItemNameExtension;
            if (extensionsDiffer) {
                before = nameExtension.localeCompare(entryItemNameExtension) < 0;
            }
        } else if (nameExtensionPresent) {
            before = false;
        } else if (entryItemNameExtensionPresent) {
            before = true;
        }
    }
    return before;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvbmFtZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgYXJyYXlVdGlsaXRpZXMgfSBmcm9tIFwibmVjZXNzYXJ5XCI7XG5cbmNvbnN0IHsgc2Vjb25kIH0gPSBhcnJheVV0aWxpdGllcztcblxuZXhwb3J0IGZ1bmN0aW9uIGV4dGVuc2lvbkZyb21OYW1lKG5hbWUpIHtcblx0bGV0IGV4dGVuc2lvbiA9IG51bGw7XG5cblx0Y29uc3QgbWF0Y2hlcyA9IG5hbWUubWF0Y2goL14uKlxcLihbXi5dKykkLyk7XG5cblx0aWYgKG1hdGNoZXMgIT09IG51bGwpIHtcblx0XHRjb25zdCBzZWNvbmRNYXRjaCA9IHNlY29uZChtYXRjaGVzKTtcblxuXHRcdGV4dGVuc2lvbiA9IHNlY29uZE1hdGNoOyAgLy8vXG5cdH1cblxuXHRyZXR1cm4gZXh0ZW5zaW9uO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbmFtZVdpdGhvdXRFeHRlbnNpb25Gcm9tTmFtZShuYW1lKSB7XG5cdGxldCBuYW1lV2l0aG91dEV4dGVuc2lvbiA9IG51bGw7XG5cblx0Y29uc3QgbWF0Y2hlcyA9IG5hbWUubWF0Y2goL14oLispXFwuW14uXSskLyk7XG5cblx0aWYgKG1hdGNoZXMgIT09IG51bGwpIHtcblx0XHRjb25zdCBzZWNvbmRNYXRjaCA9IHNlY29uZChtYXRjaGVzKTtcblxuXHRcdG5hbWVXaXRob3V0RXh0ZW5zaW9uID0gc2Vjb25kTWF0Y2g7ICAvLy9cblx0fVxuXG5cdHJldHVybiBuYW1lV2l0aG91dEV4dGVuc2lvbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5hbWVJc0JlZm9yZUVudHJ5SXRlbU5hbWUobmFtZSwgZW50cnlJdGVtTmFtZSkge1xuXHRsZXQgYmVmb3JlID0gKG5hbWUubG9jYWxlQ29tcGFyZShlbnRyeUl0ZW1OYW1lKSA8IDApO1xuXG5cdGNvbnN0IG5hbWVFeHRlbnNpb24gPSBleHRlbnNpb25Gcm9tTmFtZShuYW1lKSxcblx0XHRcdFx0ZW50cnlJdGVtTmFtZUV4dGVuc2lvbiA9IGV4dGVuc2lvbkZyb21OYW1lKGVudHJ5SXRlbU5hbWUpLFxuXHRcdFx0XHRuYW1lV2l0aG91dEV4dGVuc2lvbiA9IG5hbWVXaXRob3V0RXh0ZW5zaW9uRnJvbU5hbWUobmFtZSksXG5cdFx0XHRcdGVudHJ5SXRlbU5hbWVXaXRob3V0RXh0ZW5zaW9uID0gbmFtZVdpdGhvdXRFeHRlbnNpb25Gcm9tTmFtZShlbnRyeUl0ZW1OYW1lKSxcblx0XHRcdFx0bmFtZUV4dGVuc2lvblByZXNlbnQgPSAobmFtZUV4dGVuc2lvbiAhPT0gbnVsbCksXG5cdFx0XHRcdGVudHJ5SXRlbU5hbWVFeHRlbnNpb25QcmVzZW50ID0gKGVudHJ5SXRlbU5hbWVFeHRlbnNpb24gIT09IG51bGwpLFxuXHRcdFx0XHRuYW1lV2l0aG91dEV4dGVuc2lvbk1pc3NpbmcgPSAobmFtZVdpdGhvdXRFeHRlbnNpb24gPT09IG51bGwpLFxuXHRcdFx0XHRlbnRyeUl0ZW1OYW1lV2l0aG91dEV4dGVuc2lvbk1pc3NpbmcgPSAoZW50cnlJdGVtTmFtZVdpdGhvdXRFeHRlbnNpb24gPT09IG51bGwpLFxuXHRcdFx0XHRleHRlbnNpb25zQm90aFByZXNlbnQgPSAobmFtZUV4dGVuc2lvblByZXNlbnQgJiYgZW50cnlJdGVtTmFtZUV4dGVuc2lvblByZXNlbnQpLFxuXHRcdFx0XHRuYW1lc1dpdGhvdXRFeHRlbnNpb25zQm90aE1pc3NpbmcgPSAobmFtZVdpdGhvdXRFeHRlbnNpb25NaXNzaW5nICYmIGVudHJ5SXRlbU5hbWVXaXRob3V0RXh0ZW5zaW9uTWlzc2luZyk7XG5cblx0aWYgKG5hbWVzV2l0aG91dEV4dGVuc2lvbnNCb3RoTWlzc2luZykge1xuXHRcdC8vL1xuXHR9IGVsc2UgaWYgKG5hbWVXaXRob3V0RXh0ZW5zaW9uTWlzc2luZykge1xuXHRcdGJlZm9yZSA9IHRydWU7XG5cdH0gZWxzZSBpZiAoZW50cnlJdGVtTmFtZVdpdGhvdXRFeHRlbnNpb25NaXNzaW5nKSB7XG5cdFx0YmVmb3JlID0gZmFsc2U7XG5cdH0gZWxzZSB7XG5cdFx0aWYgKGV4dGVuc2lvbnNCb3RoUHJlc2VudCkge1xuXHRcdFx0Y29uc3QgZXh0ZW5zaW9uc0RpZmZlciA9IChuYW1lRXh0ZW5zaW9uICE9PSBlbnRyeUl0ZW1OYW1lRXh0ZW5zaW9uKTtcblxuXHRcdFx0aWYgKGV4dGVuc2lvbnNEaWZmZXIpIHtcblx0XHRcdFx0YmVmb3JlID0gKG5hbWVFeHRlbnNpb24ubG9jYWxlQ29tcGFyZShlbnRyeUl0ZW1OYW1lRXh0ZW5zaW9uKSA8IDApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAobmFtZUV4dGVuc2lvblByZXNlbnQpIHtcblx0XHRcdGJlZm9yZSA9IGZhbHNlO1xuXHRcdH0gZWxzZSBpZiAoZW50cnlJdGVtTmFtZUV4dGVuc2lvblByZXNlbnQpIHtcblx0XHRcdGJlZm9yZSA9IHRydWU7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGJlZm9yZTtcbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQ0FBQSxVQUFZOzs7O1FBTUksaUJBQWlCLEdBQWpCLGlCQUFpQjtRQWNqQiw0QkFBNEIsR0FBNUIsNEJBQTRCO1FBYzVCLHlCQUF5QixHQUF6Qix5QkFBeUI7SUFoQ1YsVUFBVztJQUVsQyxNQUFNLEdBRmlCLFVBQVcsZ0JBRWxDLE1BQU07U0FFRSxpQkFBaUIsQ0FBQyxJQUFJO1FBQ2pDLFNBQVMsR0FBRyxJQUFJO1FBRWQsT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLO1FBRXRCLE9BQU8sS0FBSyxJQUFJO1lBQ2IsV0FBVyxHQUFHLE1BQU0sQ0FBQyxPQUFPO1FBRWxDLFNBQVMsR0FBRyxXQUFXLENBQUcsQ0FBRyxBQUFILEVBQUcsQUFBSCxDQUFHOztXQUd2QixTQUFTOztTQUdELDRCQUE0QixDQUFDLElBQUk7UUFDNUMsb0JBQW9CLEdBQUcsSUFBSTtRQUV6QixPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUs7UUFFdEIsT0FBTyxLQUFLLElBQUk7WUFDYixXQUFXLEdBQUcsTUFBTSxDQUFDLE9BQU87UUFFbEMsb0JBQW9CLEdBQUcsV0FBVyxDQUFHLENBQUcsQUFBSCxFQUFHLEFBQUgsQ0FBRzs7V0FHbEMsb0JBQW9COztTQUdaLHlCQUF5QixDQUFDLElBQUksRUFBRSxhQUFhO1FBQ3hELE1BQU0sR0FBSSxJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsSUFBSSxDQUFDO1FBRTdDLGFBQWEsR0FBRyxpQkFBaUIsQ0FBQyxJQUFJLEdBQ3pDLHNCQUFzQixHQUFHLGlCQUFpQixDQUFDLGFBQWEsR0FDeEQsb0JBQW9CLEdBQUcsNEJBQTRCLENBQUMsSUFBSSxHQUN4RCw2QkFBNkIsR0FBRyw0QkFBNEIsQ0FBQyxhQUFhLEdBQzFFLG9CQUFvQixHQUFJLGFBQWEsS0FBSyxJQUFJLEVBQzlDLDZCQUE2QixHQUFJLHNCQUFzQixLQUFLLElBQUksRUFDaEUsMkJBQTJCLEdBQUksb0JBQW9CLEtBQUssSUFBSSxFQUM1RCxvQ0FBb0MsR0FBSSw2QkFBNkIsS0FBSyxJQUFJLEVBQzlFLHFCQUFxQixHQUFJLG9CQUFvQixJQUFJLDZCQUE2QixFQUM5RSxpQ0FBaUMsR0FBSSwyQkFBMkIsSUFBSSxvQ0FBb0M7UUFFdkcsaUNBQWlDO0lBQ3BDLEVBQUcsQUFBSCxDQUFHO2VBQ08sMkJBQTJCO1FBQ3JDLE1BQU0sR0FBRyxJQUFJO2VBQ0gsb0NBQW9DO1FBQzlDLE1BQU0sR0FBRyxLQUFLOztZQUVWLHFCQUFxQjtnQkFDbEIsZ0JBQWdCLEdBQUksYUFBYSxLQUFLLHNCQUFzQjtnQkFFOUQsZ0JBQWdCO2dCQUNuQixNQUFNLEdBQUksYUFBYSxDQUFDLGFBQWEsQ0FBQyxzQkFBc0IsSUFBSSxDQUFDOzttQkFFeEQsb0JBQW9CO1lBQzlCLE1BQU0sR0FBRyxLQUFLO21CQUNKLDZCQUE2QjtZQUN2QyxNQUFNLEdBQUcsSUFBSTs7O1dBSVIsTUFBTSJ9